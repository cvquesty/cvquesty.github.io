<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Questy.org]]></title>
  <link href="http://questy.org/atom.xml" rel="self"/>
  <link href="http://questy.org/"/>
  <updated>2017-10-17T17:37:37-04:00</updated>
  <id>http://questy.org/</id>
  <author>
    <name><![CDATA[Jerald Sheets]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise - Part VI - Code Manager]]></title>
    <link href="http://questy.org/blog/2017/04/28/scaling-puppet-enterprise-part-vi-code-manager/"/>
    <updated>2017-04-28T11:48:13-07:00</updated>
    <id>http://questy.org/blog/2017/04/28/scaling-puppet-enterprise-part-vi-code-manager</id>
    <content type="html"><![CDATA[<h3>Recap</h3>

<p>Let&rsquo;s see where we are.</p>

<ol>
<li>We have a Puppet Enterprise Split Installation consisting of a Puppet Master, PuppetDB, and Puppet Enterprise Console.</li>
<li>We have a Load Balancer with two compiler nodes behind it.</li>
<li>We have an ActiveMQ Hub and an ActiveMQ Spoke and have removed ActiveMQ responsibilites from the Enterprise Master (MoM).</li>
<li>We have built a GitLab instance to host our Control Repo and other items necessary to operation of our Puppet environment.</li>
</ol>


<hr />

<p>The final remaining piece is like a &ldquo;glue&rdquo; step where we pull all the various pieces together, generate keys for SSH and deployment tokens. We also associate the ctalog compilers to the Enterprise master and coordinate the deployment of code across the masters.  Needless to say, you will need to have already performed all the preceding steps, and have made everything ready to go for the following procedure. Failure to have done so will have unpredictable results. So, if you&rsquo;re ready, let&rsquo;s proceed.</p>

<h3>Setup A Control Repository</h3>

<p>The first and foremost piece is to have a repo whose job is to &ldquo;control&rdquo; the processig of modules and custom code, and giving the &ldquo;map&rdquo; for deployment into your Enterprise master and catalog compilers. Puppet Labs has a suggested sample one <a href="https://github.com/puppetlabs/control-repo">here</a> which has quite a number of nice features. However, when I first wrote this tutorial, it was considerably overkill for what I was needing to do, so I opted to create my own <strong>very simple</strong> version of a control repository. Quite a few iterations have occurred since writing these instructions, so I will continue with my instructions.</p>

<h3>The Control Repo</h3>

<p>The control repo came about as a collaboration at Puppet Labs between employees, consultants, users, etc. It was originally named something else which escapes me at the moment, but eventually came to be named the &ldquo;control repo&rdquo; by virtue of the service it performs. In short, it contains the &ldquo;map&rdquo; between what you have in Git or at the Puppet Forge, and the deployment directories on your Puppet masters. The &ldquo;map&rdquo; itself is known as the &ldquo;Puppetfile&rdquo;. This file contains a listing of all the modules you want deployed to the server. The bonus is that for each Git branch you have within the repo, this specifies an &ldquo;environment&rdquo; to Puppet.</p>

<p>I won&rsquo;t get into all the conversation around whether you should have 1:1 mapping between Git branches and Puppet Environments and then from Puppet Environments to application tiers&hellip; I&rsquo;ll leave that to the Puppet folks. I have always mapped everthing identically all the way through, and will cover that process here.</p>

<p><em>NOTE: The understood way of doing this these days is that if you have a new &ldquo;thing&rdquo; you want to create, you fork a feature branch, apply it to a few nodes for testing, then merge back into your master or production branch and deploy everywhere. I&rsquo;d recommend learning this. In my own needs, I had a lot of governed environments (PCI, SOX, ITIL, etc) that needed absolute code separation, and the ability to demonstrate that no code in one environment had a chance of deploying to another.  (principle of environment separation)  As a result, I always opted for 1:1 correlation.</em></p>

<p>I have created a sample control_repo you can clone from here:  <a href="https://github.com/cvquesty/control_repo.git">https://github.com/cvquesty/control_repo.git</a></p>

<p>This is a bare repo with a collection of Forge modules populated into the Puppetfile with a &ldquo;development&rdquo; and a &ldquo;production&rdquo; branch. This will trigger Puppet to create directories called &ldquo;development&rdquo; and &ldquo;production&rdquo; in /etc/puppetlabs/code/environments, and will contain the items you instruct it to deploy there from the Puppetfile.</p>

<p>First, clone the repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/cvquesty/control_repo.git</span></code></pre></td></tr></table></div></figure>


<p>to a working directory of your choice on your local node.  Next, change to the directory and view the remote:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd control_repo
</span><span class='line'>git remote -v</span></code></pre></td></tr></table></div></figure>


<p>This should present you with the GitHub location of my sample repo:</p>

<blockquote><p>origin    <a href="https://github.com/cvquesty/control_repo.git">https://github.com/cvquesty/control_repo.git</a> (fetch)
origin    <a href="https://github.com/cvquesty/control_repo.git">https://github.com/cvquesty/control_repo.git</a> (push)</p></blockquote>

<p>This will present you an issue in that you can&rsquo;t push to my repo. What I always tell people to do is to move it to their own Git repo. This is well documented elsewhere, but I&rsquo;ll give you an example process.</p>

<p>While in the control_repo directory, perform the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout development
</span><span class='line'>git remote rm origin </span></code></pre></td></tr></table></div></figure>


<p>This now makes sure you&rsquo;re in the development branch, and that the repo is unattached to my GitHub account.  Next, you&rsquo;ll need to create a control_repo in <em>your</em> Git server, and set it as your own remote.  First login to your Git server and create an empty repo to hold the code. Next, in the repo you forked from mine, run the commands to switch repos like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin https://&lt;YOUR_GIT_SERVER&gt;/&lt;YOUR_ID&gt;/control_repo.git
</span><span class='line'>
</span><span class='line'>git add .
</span><span class='line'>
</span><span class='line'>git commit -a -m 'Initial Commit'
</span><span class='line'>
</span><span class='line'>git push origin development
</span><span class='line'>
</span><span class='line'>git checkout production
</span><span class='line'>
</span><span class='line'>git add .
</span><span class='line'>
</span><span class='line'>git commit -a -m 'Initial Commit'
</span><span class='line'>
</span><span class='line'>git push origin production</span></code></pre></td></tr></table></div></figure>


<p>Now, you have the repo local to you and pointing to your own Git repository so you can edit and update the control_repo at will.  <em>(you might note extra steps there.  This is for those unfamiliar with Git.  They may not be necessary, but it gives a good pattern for how to work with repos, and I want to establish good habits early.)</em></p>

<h3>Generate SSH Keys</h3>

<p>On the Enterprise Master, you will need to create locations and/or set permissions on files and directories used by Code Manager:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown -R pe-puppet:pe-puppet /etc/puppetlabs/code
</span><span class='line'>chown -R pe-puppet:pe-puppet /etc/puppetlabs/code-staging
</span><span class='line'>mkdir -p /etc/puppetlabs/puppetserver/ssh</span></code></pre></td></tr></table></div></figure>


<p>Next, you will need to generate a secret key to use with Code Manager setup.  To create the secret key, perform the following on the Enterprise Master:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -b 4096 -C "SSH Deploy Keys"</span></code></pre></td></tr></table></div></figure>


<p>When ssh-keygen asks you what to name the key, I usually give it a name I can remember, name it after the customer I am doing work for, or just name it for the Control Repo itself. In this case, let&rsquo;s answer with the latter:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa</span></code></pre></td></tr></table></div></figure>


<p>Now, when configuring Code Manager in the Puppet Enterprise Console, you will use that key.</p>

<p>next, ensure all associated files are owned by the PE user:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chown -R pe-puppet:pe-puppet /etc/puppetlabs/puppetserver/ssh</span></code></pre></td></tr></table></div></figure>


<h3>Create RBAC Code Manager User</h3>

<p>Next, you&rsquo;ll need a Code Manager user in the Enterprise Console. use the following process for that:</p>

<ol>
<li>Create a new role named &ldquo;Deploy Environments&rdquo;</li>
<li><p>Assign this role the following permissions:</p>

<ul>
<li>Add the &ldquo;<strong>Puppet Environment</strong>&rdquo; type.</li>
<li>Set <strong>Permissions</strong> for this type to &ldquo;<strong>Deploy Code</strong>&rdquo;</li>
<li>Set the <strong>Object</strong> for this type to <strong>All</strong>.</li>
</ul>
</li>
<li><p>Add the <strong>Tokens</strong> Type</p>

<ul>
<li>Set <strong>Permissions</strong> for this type to <strong>Override Default Expiry.</strong></li>
</ul>
</li>
<li>Create a local user to manage code deployments.

<ul>
<li>Click &ldquo;<strong>Access Control | users</strong>&rdquo;</li>
<li>On the <strong>Users</strong> page, in the <strong>Full Name</strong> field, type the User&rsquo;s Full Name: (e.g. <strong>CM Admin</strong>)</li>
<li>In the <strong>Login</strong> field, type the name <strong>cmadmin</strong>.</li>
<li>Click <strong>Add Local User</strong>.</li>
</ul>
</li>
<li>Set the User&rsquo;s password to &ldquo;puppetlabs&rdquo; (or whatever you&rsquo;d like to use)

<ul>
<li>Select the user from the list.</li>
<li>Click &ldquo;<strong>Generate password reset</strong>&rdquo;</li>
<li>Retrieve the link in a browser, and set the password to &ldquo;<strong>puppetlabs</strong>&rdquo;.</li>
</ul>
</li>
<li>Finally, add the user to the &ldquo;<strong>Deploy Code</strong>&rdquo; role.

<ul>
<li>Click the &ldquo;<strong>Deploy Environments</strong>&rdquo; role.</li>
<li>Click the &ldquo;<strong>Member Users</strong>&rdquo; tab.</li>
<li>Fromt the dropdown list in the <strong>User Name</strong> field, select the <strong>CM Admin</strong> user and click <strong>Add User</strong>.</li>
</ul>
</li>
</ol>


<h3>Code Manager</h3>

<p>Under the covers, Puppet Labs now uses r10k with the control repository to manage the deployment of code.nUnder this scenario, a few items are very important to remember:</p>

<ul>
<li>Under no circumstances should you be manually editing code in /etc/puppetlabs/code any more. Any attempt to do so will be overwritten by the code manager. ALL deployments to the system must come through your editing the control_repo and pointing to either Forge modules or custom modules you have written to be deployed to your Enterprise Master (and sync'ed to the catalog compilers).</li>
<li>You <strong>must</strong> have a control repo branch for each environment you wish to represent in your Masters (production, testing, etc.)</li>
<li>You cannot shorten or live without the fully named &ldquo;production&rdquo; environment. Puppet hard-coded this environment name in the product, and shortening the name to &ldquo;prd&rdquo;, &ldquo;prod&rdquo;, etc. will not work.</li>
<li>Code Manager operates with a synchronization subdirectory that lives in /etc/puppetlabs/code-staging. When you&rsquo;re pushing coe via your control_repo, it goes here first, then Code Manager and Code Sync take over, and publish the code to all compile masters at once. Once all masters have the code in code-staging, it gets copied to /etc/puppetlabs/code.</li>
</ul>


<p>More information on this process can be found at <a href="https://docs.puppet.com/pe/2015.3/code_mgr.html">Puppet&rsquo;s Documentation site</a>.</p>

<h3>Configuring the Git Server</h3>

<p>You should have a custom deployment user explicitly for pushing code into your master. I have settled on using &ldquo;cmadmin&rdquo; as a deploy user on the Git Server. This allows you to have a generic user on the GitLab server you created earlier that you can work with, configure web hooks for, and then leave the credentials for that user with your customer or place it into IDM for your company.</p>

<p>To setup the new user:</p>

<ol>
<li>Create a user in the admin area of the GitLab server named &ldquo;<strong>cmadmin</strong>&rdquo;.  Next, select &ldquo;<strong>Edit</strong>&rdquo; in the upper right hand corner of the screen and set the password as you see fit. <em>(I&rsquo;ll use &ldquo;<strong>puppetlabs</strong>&rdquo;)</em></li>
<li>Select &ldquo;Impersonate&rdquo; from the upper right hand section of the page to assume the identity of the &ldquo;<strong>cmadmin</strong>&rdquo; user.</li>
<li>Select &ldquo;<strong>New Project</strong>&rdquo;.</li>
<li>On the resulting page, create a new repo called &ldquo;<strong>control_repo</strong>&rdquo; and make it a piblic project.</li>
<li>Click &ldquo;<strong>Create Project</strong>&rdquo;.</li>
<li>Push the control repo from the previous section to this repo in the <strong>cmadmin</strong> space.</li>
<li>Seeing as we are using GitLab, you are unable to use a full authenticated deploy token because GitLab server&rsquo;s input buffer is too short to handle a full authentication token. <em>NOTE: This has changed in later versions of GitLab. You may find success in just creating the token.</em></li>
<li><p>Configure the Webhook:</p></li>
<li><p>Connect to your Git server <em>(e.g. <a href="http://git.example.com">http://git.example.com</a>)</em> and choose the &ldquo;<strong>settings gear</strong>&rdquo; from the bottom left hand side of the page.</p></li>
<li>Once in the settings for the <strong>cmadmin</strong> user, there is a small icon on the left frame tht looks like two links of chain and is labelled &ldquo;<strong>Webhooks</strong>&rdquo;.</li>
<li>Next, add the _<strong><a href="https://master.example.com:8170/code-manager/v1/webhook?type=gitlab**_">https://master.example.com:8170/code-manager/v1/webhook?type=gitlab**_</a> formatted webhook into the &ldquo;</strong>URL**&rdquo; box.</li>
</ol>


<p><em>The &ldquo;<strong>prefix</strong>&rdquo; section points to the name od the user based on the way GitLab uses namespaces in the URL.</em></p>

<ul>
<li>Also select items you need from the list of options. I recommend selecting all items <strong>except</strong> &ldquo;<strong>Build Events</strong>&rdquo; and <strong>DE</strong>-select &ldquo;<strong>Enable SSL Verification</strong>&rdquo;.</li>
<li>Click &ldquo;<strong>Add Webhook</strong>&rdquo;.</li>
</ul>


<h3>Configuring the SSH Key</h3>

<p>Finally, add the <strong>PUBLIC</strong> SSH key created on the Enterprise master located at /etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa.pub to the SSH keys section for the <strong>CM Admin</strong> user in the GitLab Server.</p>

<ol>
<li>While still impersonating the &ldquo;<strong>cmadmin</strong>&rdquo; user in the GitLab GUI Interface, choose the &ldquo;<strong>cmadmin</strong>&rdquo; icon in the lower left of the browser.  Next, choose &ldquo;<strong>Profile Settings</strong>&rdquo; in the left hand bar.</li>
<li>Under the profile&rsquo;s Settings, choose &ldquo;<strong>SSH Keys</strong>&rdquo; from the left hand bar.</li>
<li>Paste in the <strong>PUBLIC KEY</strong> to the &ldquo;<strong>Key</strong>&rdquo; text box. The <strong>Title</strong> text box should populate automatically. <em>(or, you can name it yourself.)</em></li>
<li>Click &ldquo;<strong>Add Key</strong>&rdquo;.</li>
</ol>


<h3>Installing Code Manager</h3>

<p>This process assumes you have follwed this entire series from start to here in order. The final steps are to install and configure the Code Manager itself. This is that process.</p>

<ol>
<li>At the <strong>Puppet Enterprise Console</strong>, navigate to <strong>Nodes | Classification | PE Master | Classes Tab | puppet_enterprise::profile::master</strong>.</li>
<li><p>In the <strong>puppet_enterprise::profile::master</strong> class, you need to set the following parameters:</p></li>
<li><p><strong>r10k_remote</strong> => &lsquo;the <em>git</em> FQDN and path to the namespace/control_repo of this node.&rsquo;</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>e.g. **git@git.example.com:cmadmin/control_repo.git**</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>r10k_private_key</strong> => &lsquo;the full path to your deploy key on your Puppet enterprise master&rsquo;</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>e.g. **/etc/puppetlabs/puppetserver/ssh/id-control_repo.rsa**</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>file_sync_enabled</strong> => true</li>
<li><strong>code_manager_auto_configure</strong> => true</li>
</ul>


<p>At this point, you also want to make sure your control_repo has a hieradata value set. If you cloned your repo from mine, you already have that value set in the common.yaml in the hieradata directory. That setting would be:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet_enterprise::master::code_manager::authenticate_webhook: false</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE: Recall that GitLab has change dramatically since the original writing of this tutorial. Later versions allow you to authenticate the webhook. WHen I wrote this, I was working around technological limitations that are now gone. Feel free to complete this as needed, but I just wanted to disclaim the reasoning for these previous configuration steps.</em></p>

<p>Next, ensure the hiera.yaml lives in $confdir as needed for Code manager:</p>

<ul>
<li>Edit the /etc/puppetlabs/puppet/puppet.conf file to ensure there is a line in the &ldquo;<strong>[Main]</strong>&rdquo; section: <strong>hiera_config = $confdir/hiera.yaml</strong>.</li>
</ul>


<p>Finally, run the puppet agent to apply all the above configuration changes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet agent -t</span></code></pre></td></tr></table></div></figure>


<p>Test the hiera value on the command line to ensure Hiera has picked up your value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hiera -c /etc/puppetlabs/puppet/hiera.yaml puppet_enterprise::master::code_manager::authenticate_webhook environment=production</span></code></pre></td></tr></table></div></figure>


<p>You should get a return of &ldquo;false&rdquo;.</p>

<p><em>NOTE: Later versions of Hiera respond to the &ldquo;lookup&rdquo; command. The older &ldquo;hiera&rdquo; command line utility has intermittent proper functioning at this time, and it has been recommended on the Puppet Community Slack that &ldquo;Lookup&rdquo; is the way to go at this time.</em></p>

<h3>Generate Authentication Token</h3>

<p>On the Puppet Enterprise Master, you must now generate an authentication token for the CM Admin deployment user to be authorized to push code.  First, request the token:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/puppetlabs/bin/puppet-access login --service-url https://console.example.com:4433/rbac-api --lifetime 180d</span></code></pre></td></tr></table></div></figure>


<p>It will request a username and password. Use the credentials you created in the RBAC console <em>(In my example, <strong>cmadmin::puppetlabs</strong>)</em> and the system will write the token to <strong>/root/.puppetlabs/token</strong>.</p>

<h3>Time to restart!!</h3>

<p>Run the puppet agent on all compile masters in no particular order:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>**puppet agent -t**</span></code></pre></td></tr></table></div></figure>


<h3>Now, lets' Test!!</h3>

<p>Prior to PE 2016.x.x, you could only fire the tests with curl commands against the API. Those would be as follows:</p>

<p><strong>Deploy a Single Environment</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/curl -k -X POST -H 'Content-Type: application/json' "https://localhost:8170/code-manager/v1/deploys? token=`cat ~/.puppetlabs/token`" -d '{"environments": ["ENVIRONMENTNAME"], "wait": true}'</span></code></pre></td></tr></table></div></figure>


<p><strong>Deploy All Code Manager Managed Environments</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/bin/curl -k -X POST -H 'Content-Type: application/json' "https://localhost:8170/code-manager/v1/deploys?token=`cat ~/.puppetlabs/token`" -d '{"deploy-all": true}'</span></code></pre></td></tr></table></div></figure>


<p>On PE Versions 2016.x.x and later, a new tool known as puppet-code was created to ease the testing and firing of the deploys.</p>

<p><strong>Deploy a Single Environment</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/puppetlabs/bin/puppet-code deploy {environmentname}</span></code></pre></td></tr></table></div></figure>


<p><strong>Deploy All Code Manager Managed Environments</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/puppetlabs/bin/puppet-code deploy --all</span></code></pre></td></tr></table></div></figure>


<h3>Conclusion</h3>

<p>At this point, you should see your code beginning to populate the <strong>/etc/puppetlabs/code-staging</strong> directory and then eventually the <strong>/etc/puppetlabs/code</strong> directory.  Your final tests will include pushing code to the control_repo to test that the hook is working properly.</p>

<p>If all goes well, you should have code automatically deploy to the $codedir after a few seconds to a minute depending on a variety of factors.</p>

<h4>Other Stuff</h4>

<p>I wrote these as tutorials as I mentioned in the first article to help coworkers complete the same process I was doing. I had to sanitize out a lot of internal info, and I had to change hostnames on the fly to make sure &ldquo;all the things&rdquo; were secret that needed to be, so the names in question have not been specifically tested end-to-end, but the principles are the same.</p>

<p>I worked on both 2015.x.x and 2016.x.x with this process, but newer versions of PE may have different features or setup options not covered here.  As with any &ldquo;Open&rdquo; documentation, &ldquo;Your mileage may vary&rdquo; and &ldquo;Use at your own risk.&rdquo;</p>

<p>I hope this helps someone out there get Code Manager setup and fuctioning in a Large Environment Installation scenario, and you scale as large as you need to as a result of the footwork I&rsquo;ve done here. Feel free to email me for errors you find, and I&rsquo;ll fix &lsquo;em up right away!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise - Part v - GitLab]]></title>
    <link href="http://questy.org/blog/2017/04/24/scaling-puppet-enterprise-part-v-gitlab/"/>
    <updated>2017-04-24T21:48:29-07:00</updated>
    <id>http://questy.org/blog/2017/04/24/scaling-puppet-enterprise-part-v-gitlab</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve been following for the past 5 installments, we&rsquo;re nearing the end! Note that each of the prior articles required other things to have been completed before reading/performing the contained steps, but this article is a bit different. In all truth, you could do this process at any point, but I placed it here for one reason alone. <em>&ldquo;Why do this manually when I could get Puppet to do it for me?&rdquo;</em></p>

<p>The importance of this particular step is that we need a place to hold our &ldquo;control repo&rdquo; <em>(more on this later)</em> and if you don&rsquo;t already have Git installed in your environment, you&rsquo;ll need it. So, before finishing up the installation and configuration of Code Manager, utilizing Puppet to install GitLab is a good test that everything is installed and configured properly, and all the components are communicating as expected.</p>

<p>Without further delay, let&rsquo;s continue.</p>

<hr />

<h3>Create a Machine to Serve as the GitLab Server</h3>

<p>Provision a new node according to our earlier chart to serve as your GitLab server. While I list specifications, you may find more mileage by scaling the Git server larger. If you will be expanding your Puppet team and will have dozens to hundreds of people developing for Puppet, scaling will be a consideration. Also, while outside the scope of this article, you will want to configure offsite backup and/or replication to a geographically separte location for your GitLab server. This is of paramount importance. If you lose this server, all configuration for all systems managed in all environments across your organization would be lost. This isn&rsquo;t the end of the world in terms of business continuity, but trying to recreate all that code from the ground up would be prohibitive.</p>

<p>Yes, people will have recent copies of the repo on their local machines. Yes, with some nonzero level of effort, you should be able to get the repos back.  No, it&rsquo;s not fun, and you&rsquo;ll have a bad time. Just back up your server, and if possible&hellip;replicate it elsewhere in your organization.</p>

<p>My intial suggested specifications on this server are:</p>

<p><img src="http://cvquesty.github.io/images/gitlab_specs.png" alt="GitLab Specs" /></p>

<p>I don&rsquo;t specify disk for /opt and /var here, as each of these images carries ample disk with it. If you believe you will need additional storage for your Git instance, feel free to scale this as you see fit.</p>

<p>Once the server is installed, go ahead and install the Puppet Agent on it, pointing to the compiler VIP like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k https://compile.example.com:8140/packages/current/install.bash | bash</span></code></pre></td></tr></table></div></figure>


<p>Once the agent installation is complete, in the Puppet Enterprise Console, navigate to <strong>Nodes | Unsigned Certificates</strong> and accept the new cert request for the GitLab server. Once that is complete, SSH to the GitLab server, and run <strong>puppet agent -t</strong> to complete the initial configuration of the node.</p>

<h3>Create a Profile to Manage the GitLab Installation</h3>

<p>On the Puppet Enterprise Master, install the <strong>vshn-gitlab</strong> module.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet module install vshn-gitlab</span></code></pre></td></tr></table></div></figure>


<p><strong>NOTE: You will need to perform this on ALL catalog compilers in your infrastructure. If the GitLab serer checks in and doesn&rsquo;t find either the vshn-gitlab module or the profile you&rsquo;re creating below on the master the load balancer refers it to, the catalog run will fail.</strong></p>

<p>On the Puppet Enterprise Master <em>(eg. master.example.com)</em> create a new profile in <strong>$codedir/environments/production/modules/profiles/manifests/gitlab.pp</strong>.</p>

<p><em>(Puppet Enterprise has an internal variable for $codedir now. If you have made no modifications to this in the puppet.conf, the default location is /etc/puppetlabs/code.)</em></p>

<p>The profile you create should look like the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Configure GitLab Server
</span><span class='line'>class profiles::gitlab {
</span><span class='line'>
</span><span class='line'>  class { 'gitlab':
</span><span class='line'>    external_url =&gt; 'http://git.example.com',
</span><span class='line'>  }
</span><span class='line'>  
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Save this as gitlab.pp.</p>

<p>In the Puppet Enterprise Console, create a new classification group.</p>

<ul>
<li>Navigate to <strong>Nodes | Classification</strong></li>
<li>Create a group called &lsquo;<strong>GitLab</strong>&rsquo; with a parent of &lsquo;<strong>All Nodes</strong>&rsquo; in the Production Environment</li>
<li>Pin the <strong>git.example.com</strong> node into the newly created <strong>GitLab</strong> group.</li>
<li>Choose the &lsquo;<strong>Classes</strong>&rsquo; tab and click the &lsquo;<strong>Refresh</strong>&rsquo; icon to pick up your newly created profile.</li>
<li>Add the <strong>profiles::gitlab</strong> class to the classification group.</li>
<li>Commit the changes.</li>
</ul>


<h3>Caveats</h3>

<p>Since we&rsquo;re mid-setup and have multiple compilers but do <strong>not</strong> have code sync enabled, we have to manually copy the new profile to all your compilers in the same location. This allows the agent on the GitLab server to pick up the profile regardless of where the load balancer sends the agent request.</p>

<p>Once the profile is in place, run <strong>puppet agent -t</strong> on your GitLab server, and Puppet will then install the GitLab software onto the server. At this point, after a short delay, you should be able to retrieve your GitLab server in a browser <em>(e.g. <a href="http://git.example.com">http://git.example.com</a>)</em> and login with the default credentials.</p>

<p>In our example, <strong>git.example.com</strong> is the server and the login would be automatically set to <strong>admin@example.com</strong> with a password of <strong>5iveL!fe</strong>.  These are defaults set by the GitLab installer.</p>

<p>Your GitLab server should now be up, running, and ready for action in your Puppet Environment.  Look for the final installment to bring everything together and finish the installation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise - Part IV - ActiveMQ Hub and Spokes]]></title>
    <link href="http://questy.org/blog/2017/04/24/scaling-puppet-enterprise-part-iv-activemq-hub-and-spokes/"/>
    <updated>2017-04-24T21:10:52-07:00</updated>
    <id>http://questy.org/blog/2017/04/24/scaling-puppet-enterprise-part-iv-activemq-hub-and-spokes</id>
    <content type="html"><![CDATA[<p><strong><em>As in the previous installment, you need to have already completed a few steps before arriving at this post.  You should have already completed a &ldquo;split installation&rdquo; (Documented <a href="http://questy.org/blog/2017/04/18/scaling-puppet-enterprise-part-ii-installation/">here</a>). Also, your load balancer needs to be configured and running. The procedure for this portion can be found <a href="http://questy.org/blog/2017/04/21/scaling-puppet-enterprise-part-iii-additional-compilers-part-1/">here</a>.  Finally, you should have the additional compilers installed and configured along with two example agent nodes as covered <a href="http://questy.org/blog/2017/04/21/scaling-puppet-enterprise-part-iiia-additional-compilers/">here</a> and <a href="http://questy.org/blog/2017/04/21/scaling-puppet-enterprise-part-iiib-additional-compilers/">here</a>.. If you&rsquo;ve completed all these portions, you are now ready to configure ActiveMQ for scaling MCollective.</em></strong></p>

<p>Once the preceding items are performed, you may find it necessary to add ActiveMQ hubs and spokes to increase capacity for MCollective and/or the Code Sync and Code Manager functions of Puppet Enterprise. This installment documents how to install these additional components and tie them into the existing infrastructure.</p>

<h3>Create an ActiveMQ Hub</h3>

<ol>
<li>Go to the Puppet Enterprise Console in your browser.</li>
<li>Select <strong>Nodes | Classification</strong> and create a new group called <strong>&ldquo;PE ActiveMQ Hub&rdquo;</strong></li>
<li>Stand up two new nodes for the ActiveMQ Hub and Spoke (in our example, <strong>activemq-hub.example.com</strong> and <strong>activemq-spoke.example.com</strong>) according to the following specifications:</li>
</ol>


<p><img src="http://cvquesty.github.io/images/hub_spoke_specs.png" alt="Hub and Spoke Specs" /></p>

<p>Once your nodes have been provisioned, install the Puppet Agent on each node, <strong>making sure to point the installer DIRECTLY at the MoM (</strong>master.example.com**) instead of at the compiler VIP.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k https://master.example.com:8140/packages/current/install.bash | bash</span></code></pre></td></tr></table></div></figure>


<p>
and let the agent install complete in its entirety.</p>

<p>Next, from your browser, retrieve the Puppet Enterprise Console and select the &ldquo;<strong>PE ActiveMQ Hub</strong>&rdquo; group you created earlier. Pin the <strong>activemq-hub.example.com</strong> node into the <strong>PE ActiveMQ Hub</strong> group.</p>

<ol>
<li>Select the &ldquo;<strong>Classes</strong>&rdquo; tab and add a new class entitled: &ldquo;<strong>puppet_enterprise::profile::amq::hub</strong>&rdquo;</li>
<li>Click &ldquo;<strong>Add Class</strong>&rdquo;.</li>
<li>Under the Parameters drop-down, select &ldquo;<strong>network_collector_spoke_collect_tag</strong>&rdquo; and set its value to &ldquo;<strong>pe-amq-network-connectors-for-activemq-hub.example.com</strong>&rdquo;</li>
<li>Commit the changes.</li>
<li>SSH to the <strong>activemq-hub.example.com</strong> and run <strong>puppet agent -t</strong> to make all your changes effective for the Hub node.</li>
</ol>


<h3>Create ActiveMQ Spoke (or &ldquo;broker&rdquo;)</h3>

<ol>
<li>In the Puppet Enterprise Console, Select <strong>Nodes | Classification | PE ActiveMQ Broker</strong></li>
<li>Pin your new ActiveMQ broker into the <strong>PE ActiveMQ Broker</strong> group.</li>
<li>Select the &ldquo;<strong>Classes</strong>&rdquo; tab.</li>
<li>Under the <strong>puppet_enterprise::profile::amp::broker</strong> class, choose the <strong>activemq_hubname</strong> parameter and set it to the FQDN of the hub you just created. In our case, <strong>activemq-hub.example.com</strong>.</li>
<li>SSH to the new broker (<strong>activemq-spoke.example.com</strong>) and run <strong>puppet agent -t</strong>.</li>
<li>Finally, unpin <strong>master.example.com</strong> from the <strong>PE ActiveMQ Broker</strong> group.</li>
</ol>


<h3>Conclusion</h3>

<p>At this point, you should have:</p>

<ul>
<li>Puppet Master of Masters - <strong>master.example.com</strong></li>
<li>PuppetDB - <strong>puppetdb.example.com</strong></li>
<li>PE Console - <strong>console.example.com</strong></li>
<li>HAProxy Node - <strong>compiler.example.com</strong></li>
<li>2 Catalog compilers - <strong>compile1.example.com</strong> and <strong>compile2.example.com</strong></li>
<li>An ActiveMQ Hub - <strong>activemq-hub.example.com</strong></li>
<li>An ActiveMQ Spoke - <strong>activemq-spoke.example.com</strong></li>
<li>Two Agent Nodes - <strong>agent1.example.com</strong> and <strong>agent2.example.com</strong></li>
</ul>


<p>with their respective configurations. Your serving infrastructure is complete, and you are now ready to configure it for use.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise - Part IIIb - Additional Compilers]]></title>
    <link href="http://questy.org/blog/2017/04/23/scaling-puppet-enterprise-part-iiib-additional-compilers/"/>
    <updated>2017-04-23T18:19:42-04:00</updated>
    <id>http://questy.org/blog/2017/04/23/scaling-puppet-enterprise-part-iiib-additional-compilers</id>
    <content type="html"><![CDATA[<p><strong><em>As in the previous installment, you need to have already completed a few steps before arriving at this post.  You should have already completed a &ldquo;split installation&rdquo; (Documented <a href="http://questy.org/blog/2017/04/18/scaling-puppet-enterprise-part-ii-installation/">here</a>). Also, your load balancer needs to be configured and running. The procedure for this portion can be found <a href="http://questy.org/blog/2017/04/21/scaling-puppet-enterprise-part-iii-additional-compilers-part-1/">here</a>.  If you&rsquo;ve completed all these portions, you are now ready to configure and install the compilers themselves. If this is you, read on!</em></strong></p>

<hr />

<p>Once your Load Balancer and split install are in place and functioning, we need to add more compilers to the serving infrastructure. For the purposes of this tutorial, we will install two additional catalog compilers, register them with the currently existing master. Then, we will direct them to look to the &ldquo;MoM&rdquo; or the &ldquo;Master of Masters&rdquo; as the CA certificate authority.  Further, we will install two agent nodes and connect them to the infrastructure.</p>

<p>You will need to install two compiler nodes and two agent nodes according to the following specifications.</p>

<p><img src="http://cvquesty.github.io/images/compiler_and_agent_specs.png" alt="Compilers and Agents" /></p>

<p>Once these four nodes are in place, we can connect the compilers to the Master of Masters (MoM) and then the agents to the &ldquo;master&rdquo; as they see it.  Remember, that for our purposes, these nodes are named:</p>

<ul>
<li>compile1.example.com</li>
<li>compile2.example.com</li>
<li>agent1.example.com</li>
<li>agent2.example.com</li>
</ul>


<h3>Installing the Compilers</h3>

<p>SSH to the first compiler master (<strong>compile1.example.com</strong> for this post&rsquo;s purposes) and install the Puppet agent as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k https://master.example.com:8140/packages/current/install.bash | bash -s main:dns_alt_names=compile1.example.com,compile.example.com,compile1,compile</span></code></pre></td></tr></table></div></figure>


<p>What this does is simple. When this compiler goes behind the load balancer (<strong>compile.example.com</strong>), traffic may get directed to this node. When the request is made, the agent node will be asking for &ldquo;<strong>compile.example.com</strong>&rdquo; but this node&rsquo;s name is &ldquo;<strong>compile1.example.com</strong>&rdquo;. The additional options at the end of the curl line are to tell the agent that when it installs, it should be aware of both names, and when speaking to the MoM the first time to request its cert, to represent all the comma delimited names listed at the end of the above command.</p>

<p>Next, SSH to your master node and accept the agent cert request as follows to allow for these names on the MoM you just set up in the previous step.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh master.example.com
</span><span class='line'>puppet cert --allow-dns-alt-names sign compile1.example.com
</span></code></pre></td></tr></table></div></figure>


<h4>NOTE THAT YOU CANNOT ACCEPT THIS CERT FROM THE CONSOLE. ALT_DNS IS NOT SUPPORTED FROM THE GUI</h4>

<p>Finally, run the puppet agent on the first compiler <em>(compile1.example.com)</em> to configure the node:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet agent -t</span></code></pre></td></tr></table></div></figure>


<p>Once the agent run is complete, you need to classify the catalog compiler in the console to make it ready for service.</p>

<h3>Classify the Compiler</h3>

<p>In the Puppet Enterprise Console:</p>

<p>Choose <strong>Nodes | Classification | PE Master</strong></p>

<p>Add <strong>compile1.example.com</strong> and pin the node to the classification group and commit the change.</p>

<p><strong><strong><em>BE SURE TO COMPLETE THE NEXT STEPS IN ORDER AS FOLLOWS OR YOU WILL HAVE A BAD TIME</em></strong></strong></p>

<p>First: SSH to <strong>compile1.example.com</strong> and run <strong><em>puppet agent -t</em></strong></p>

<p>Second: SSH to <strong>puppetdb.example.com</strong> and run <strong><em>puppet agent -t</em></strong></p>

<p>Third: SSH to <strong>console.example.com</strong> and run <strong><em>puppet agent -t</em></strong></p>

<p>Fourth: SSH to <strong>master.example.com</strong> and run <strong><em>puppet agent -t</em></strong></p>

<p><strong><strong><em>BE SURE TO ALLOW EACH RUN TO COMPLETE <em>FULLY</em> BEFORE MOVING ON TO THE NEXT ONE</em></strong></strong></p>

<h3>For All Subsequent Compile Node Installations</h3>

<p>Follow the above instructions completed for <strong>compile1.example.com</strong> for all subsequent compiler installations. This means that if you add compilers six months or a year from now, go back to the previous procedure and duplicate it with the new node name precisely as you did above.  To recap:</p>

<ol>
<li>Install the agent as above with the alt_dns switches</li>
<li>Accept the cert on the master with the alt_dns switches</li>
<li>Classify the compiler in the console</li>
<li>Run the Puppet agent in the above specified order, allowing each one to complete fully before moving on.</li>
</ol>


<h3>Configure Future Agent Installations to Point to the Load Balancer by Default</h3>

<p>In the Puppet Enterprise Console, you must configure the system to point all future agent installations to the load balancer by default so you do not have to continue to make modifications and customizations after each agent install. To do so, perform the following steps:</p>

<ol>
<li>In the Puppet Enterprise Console, choose: <strong>Nodes | Classification | PE Master</strong></li>
<li>Select the &ldquo;<strong>Classes</strong>&rdquo; tab.</li>
<li>Choose the &ldquo;<strong>pe_repo</strong>&rdquo; class.</li>
<li>Under the parameters drop-down, choose &ldquo;master&rdquo; and set the text box to the name of your load balancer or VIP <em>(in our case, <strong>&ldquo;compile.example.com&rdquo;</strong>)</em></li>
<li>Commit the changes.</li>
</ol>


<h3>Point the New Compilers at the Master (MoM) for CA Authority</h3>

<h4>Create a new classification group called &ldquo;PE CA pe_repo Override&rdquo;</h4>

<ul>
<li>Go to <strong>Nodes | Classification</strong> in the Puppet Enterprise Console</li>
<li>Create a New Group</li>
<li>Name the new group &ldquo;<strong>PE CA pe_repo Override</strong>&rdquo;</li>
<li>From the &ldquo;Parent Name&rdquo; drop-down, choose the &ldquo;<strong>PE Master</strong>&rdquo; group.</li>
<li><p>Click &ldquo;Add Group&rdquo;.</p></li>
<li><p>Select your new group and pin <strong>master.example.com</strong> to the new group and click &ldquo;<strong>Commit One Change</strong>&rdquo;</p></li>
<li>Select the &ldquo;<strong>Classes</strong>&rdquo; tab.</li>
<li>Add &ldquo;<strong>pe_repo</strong>&rdquo; class.</li>
<li>From the parameter drop-down, select &ldquo;<strong>Master</strong>&rdquo;.</li>
<li>Enter the name of the MoM in the text box. <em>(in this example, <strong>master.example.com</strong>)</em></li>
<li>Click &ldquo;Add Parameter&rdquo; and then &ldquo;Commit 2 Changes&rdquo;.</li>
</ul>


<h4>Test New Agents</h4>

<p>The two agents you created at the beginning of the article are now able to be tested with this new group of compilers.</p>

<ol>
<li>Make sure <strong>agent1.example.com</strong> and <strong>agent2.example.com</strong> have been installed according to the system requirements covered in this series.</li>
<li>Install the Puppet agent on each of these nodes, but this time instead of pointing at the MoM, point to your Load balancer vip like so:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k https://compile.example.com:8140/packages/current/install.bash | bash</span></code></pre></td></tr></table></div></figure>


<p>In the PE Console, accept the new certificate request for Agent1.  SSH to <strong>agent1.example.com</strong> and run <em><strong>puppet agent -t</strong></em>.  Finally, repeat this process for <strong>agent2.example.com</strong>.</p>

<p>If you have completed all the above steps properly, the agents will reach out to the <strong>compile.example.com</strong> VIP and be ferried off to one of the catalog compilers. Regardless of which one, since we accepted all the alternate DNS names when creating the connection between them and the MoM, they will respond for <strong>compile.example.com</strong>, and deliver back to the agent the required information, catalog, etc. as Puppet would do under normal circumstances.</p>

<h3>Conclusion</h3>

<p>As you can see, we needed the Load Balancer in place to install the catalog compilers. We also needed all the DNS alt-naming to be in place so the load balancer could send traffic to either catalog compiler as needed, and still have it answer for the VIP name. Finally, we needed to refer requests to their appropriate destinations and also classify the new compilers as such with the MoM, and set up appropriate referral of certificate requests from the compilers back to the CA Master, which is the MoM.</p>

<p>The serving infrstructure is almost done, all we have left to do is to scale MCollective with an ActiveMQ Hub &amp; Spoke, and remove that responsibility from the MoM.  We will also install a GitLab server to hold our Control Repo and associated Roles &amp; Profiles, and we will configure the Code Manager.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise - Part IIIa - Additional Compilers]]></title>
    <link href="http://questy.org/blog/2017/04/21/scaling-puppet-enterprise-part-iiia-additional-compilers/"/>
    <updated>2017-04-21T09:32:47-04:00</updated>
    <id>http://questy.org/blog/2017/04/21/scaling-puppet-enterprise-part-iiia-additional-compilers</id>
    <content type="html"><![CDATA[<p><strong><em>You should have completed a split install before beginning this section. You can find the Split Installation documentation at Puppet&rsquo;s Website, or the first installment of this tutorial <a href="http://questy.org/blog/2017/04/18/scaling-puppet-enterprise-part-ii-installation/">here</a>.  If you try and begin here, you might find yourself lost.</em></strong></p>

<p><strong><em>Note also that the &ldquo;Additional Compilers&rdquo; docs comes in two parts&ndash;One to install the Load Balancer and one to install the compilers.</em></strong></p>

<h3>First, Some Philosophy</h3>

<p>The Puppet Enterprise documentation circa PE 2015.3.2 had some &ldquo;issues&rdquo;. Let me actually preface that, though. Puppet Labs' documentation is by far some of the most voluminous and in many respects most complete vendor documentation out there. I don&rsquo;t mean to disparage their work AT ALL. When it comes to the fact they even have documentation at this level, they&rsquo;re the &ldquo;bees knees&rdquo;.</p>

<p>However, I&rsquo;ve always written documentation to fit the &ldquo;grandma rule&rdquo;. My grandmother was a little 4 foot nothing Cajun woman with English as her second language.  She never used the first computer, still had a rotary phone when she passed away, and remained suspicious of anything technical.  She <em>was</em>, however, a voracious reader, keenly intelligent, and understood considerably more than you&rsquo;d expect on first glance. She also was a stickler for puncutation, grammar, and the like. In short, if my grandma couldn&rsquo;t read the documentation and follow a step-by-step process to install Puppet successfully, then its just either too complex, poorly formatted or unclear and needs to be simplified.</p>

<p>This causes a problem, of course. There are technologists out there that would become annoyed at repetition, verbosity around &ldquo;understood&rdquo; things, and spelling out each and every step along the way&hellip; even painfully. However, I feel it is the only <em>proper</em> way to document something. My rules are simple.</p>

<ul>
<li>Leave nothing to question</li>
<li>Be as verbose and clear as possible</li>
<li>Make sure everything is in order, step-by-step</li>
</ul>


<p>By following this simple guideline, I feel I&rsquo;m doing more of a service to the reader than if I presumed on their level of sophistication with Puppet, Linux/UNIX, Windows, research capability, Google-foo or whatever.</p>

<p>So let&rsquo;s dive in, shall we?</p>

<h2>HAProxy</h2>

<p>Seemingly counterintuitive, now that we&rsquo;ve done a split install, I want to next install the HAProxy we will use as a Load Balancer on the additional compilers.  By installing this first, we can utilize Puppet to install the HAProxy, and manage them automatically rather than doing a lot of ad-hoc work.</p>

<p>Also, by doing the proxy first,  the prerequisites are satisfied in their proper order, the Load Balancer exists before configuring additional compilers (to be able to utilize the dns_alt_names for the load balancer along with the compilers) and to have the GitLab in place and hosting the control_repo before turning on and configuring Code Manager.</p>

<h3>Hardware</h3>

<p>In the initial hardware list, I included a node called &ldquo;Compile Master&rdquo;.  This node  looked like:</p>

<p><img src="http://cvquesty.github.io/images/compile_master_specs.png" alt="Compile Master Specs" /></p>

<p>This node may seem like overkill, but disk and memory are cheap.  If you are scaling at this level, its better to not have to reinstall your Load balancer later. Keep in mind, you don&rsquo;t have to use HAProxy and can use a corporate Load Balancer here, but its configuration is outside the scope of this tutorial.</p>

<p>Once you&rsquo;ve provisioned the load balancer, ssh to the node as the root user, and use the &ldquo;frictionless installer&rdquo; to add your Puppet agent.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -k https://master.example.com:8140/packages/current/install.bash | bash</span></code></pre></td></tr></table></div></figure>


<p>When the client is fully installed, retrieve the Enterprise Console from your browser, and navigate to Nodes | Classification | Unsigned Certificates and select &ldquo;Accept All&rdquo;.  Finally, ssh to the instance as the root user and run <strong><em>puppet agent -t</em></strong> to finish the setup.</p>

<h2>Configure the Load Balancer</h2>

<p>At this point, the node is provisioned and you have a Puppet agent running on it, but you have as of yet not configured the HAProxy Load Balancer for use in the environment. The load balancer will be necessary to have in place prior to adding compile masters to your existing split installation. The following instructions guide you through setting up the HAProxy load balancer.</p>

<ol>
<li><p>SSH to the Puppet Master as root.  <em>(<strong>master.example.com</strong> in our list)</em></p></li>
<li><p>Install the HAPRoxy Forge Module on the master</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puppet module install puppetlabs-haproxy</span></code></pre></td></tr></table></div></figure>


<p><br>
    <em>leave your root console open while performing steps 3-6</em></p>

<ol>
<li><p>Retrieve the Enterprise Console in your browser</p></li>
<li><p>Select <strong>Nodes</strong> | <strong>Classification</strong></p></li>
<li><p>Create a New Classification Group called &ldquo;<strong>Load Balancer</strong>&rdquo;</p></li>
<li><p>Select the new group from the list and pin the node &ldquo;<strong>compiler.example.com</strong>&rdquo; into the new group.</p></li>
<li><p>In your open SSH session to <strong>master.example.com</strong>, create the profiles module to hold the configuration for HAProxy</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /etc/puppetlabs/code/environments/production/modules
</span><span class='line'>
</span><span class='line'>mkdir -p profiles/manifests
</span><span class='line'>
</span><span class='line'>cd profiles/manifests</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>Once you have changed to the profiles/manifests directory, create the loadbalancer.pp manifest.</p></li>
<li><p>Follow the documentation <a href="https://forge.puppet.com/puppetlabs/haproxy/readme">here</a> to configure HAProxy. When complete, the loadbalancer.pp manifest should resemble the following with IPs corrected for your particular instance:</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Load Balancer Profile
</span><span class='line'>class profiles::loadbalancer {
</span><span class='line'>
</span><span class='line'>  class { 'haproxy': }
</span><span class='line'>
</span><span class='line'>  # Main Proxy Listener
</span><span class='line'>  haproxy::listen { 'compiler.example.com':
</span><span class='line'>    collect_exported =&gt; false,
</span><span class='line'>    ipaddress        =&gt; $::ipaddress,
</span><span class='line'>    ports            =&gt; '8140',
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # First Load balanced Compile Master
</span><span class='line'>  haproxy::balancermember { 'compiler1.example.com':
</span><span class='line'>    listening_service =&gt; 'compiler.example.com',
</span><span class='line'>    server_names      =&gt; 'compiler1.example.com',
</span><span class='line'>    ipaddress         =&gt; '10.0.1.24',
</span><span class='line'>    ports             =&gt; '8140',
</span><span class='line'>    options           =&gt; 'check',
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # Second Load Balanced Compile Master
</span><span class='line'>  haproxy::balancermember { 'compiler2.example.com':
</span><span class='line'>    listening_service =&gt; 'compiler.example.com',
</span><span class='line'>    server_names      =&gt; 'compiler2.example.com',
</span><span class='line'>    ipaddress         =&gt; '10.0.1.25',
</span><span class='line'>    ports             =&gt; '8140',
</span><span class='line'>    options           =&gt; 'check',
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Once you have created this profile, retrieve the Puppet Enterprise Console in your browser and navigate to <strong>Nodes | Classification | Load Balancer</strong>.</p>

<ol>
<li>Selet the <strong>Classes</strong> tab.</li>
<li>Click the &ldquo;refresh&rdquo; button so the console will pick up your new loadbalancer.pp profile to classify your node with.</li>
<li>Under the &ldquo;Add new Class&rdquo; heading, select <strong>profiles::loadbalancer</strong> from the list that drops down.</li>
<li>Click &ldquo;Add Class&rdquo;.</li>
<li>Select &ldquo;Commit 1 Change&rdquo; at the bottom right of the page.</li>
<li>SSH back into <strong>compiler.example.com</strong> and run <strong>puppet agent -t</strong> to configure the Load Balancer.</li>
</ol>


<p>Your Load Balancer is now prepared to balance traffic to two catalog compilers (<em><strong>catalog1.example.com</strong> and <strong>catalog2.example.com</strong></em>) as listed in the above configuration.</p>

<h3>Notes</h3>

<hr />

<p>I noted when putting together the loadbalancer.pp profile above that I had previously used some REALLY ODD ip addresses in the balancer config.  Why? For the life of me I cannot recall. The original file looked like so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Load Balancer Profile
</span><span class='line'>class profiles::loadbalancer {
</span><span class='line'>
</span><span class='line'>  class { 'haproxy': }
</span><span class='line'>
</span><span class='line'>  # Main Proxy Listener
</span><span class='line'>  haproxy::listen { 'compiler.example.com':
</span><span class='line'>    collect_exported =&gt; false,
</span><span class='line'>    ipaddress        =&gt; $::ipaddress,
</span><span class='line'>    ports            =&gt; '8140',
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # First Load balanced Compile Master
</span><span class='line'>  haproxy::balancermember { 'compiler1.example.com':
</span><span class='line'>    listening_service =&gt; 'compiler.example.com',
</span><span class='line'>    server_names      =&gt; 'compiler1.example.com',
</span><span class='line'>    ipaddress         =&gt; '10.0.1.24',
</span><span class='line'>    ports             =&gt; '8140',
</span><span class='line'>    options           =&gt; 'check',
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  # Second Load Balanced Compile Master
</span><span class='line'>  haproxy::balancermember { 'compiler2.example.com':
</span><span class='line'>    listening_service =&gt; 'compiler.example.com',
</span><span class='line'>    server_names      =&gt; 'compiler2.example.com',
</span><span class='line'>    ipaddress         =&gt; '10.0.1.25',
</span><span class='line'>    ports             =&gt; '8140',
</span><span class='line'>    options           =&gt; 'check',
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>In my original implementation I set the ipaddres fields with some odd IP addresses. For info around how to fill those but ,the documentation gives some hints:</p>

<blockquote><p>ipaddresses: Optional. Specifies the IP address used to contact the balancermember service. Valid options: a string or an array. If you pass an array, it must contain the same number of elements as the array you pass to the server_names parameter. For each pair of entries in the ipaddresses and server_names arrays, Puppet creates server entries in haproxy.cfg targeting each port specified in the ports parameter. Default: the value of the $::ipaddress fact.</p></blockquote>

<p>Since I was originally setting these up in Digital Ocean, I used the IP space 159.203.x.x which belongs to Digital Ocean. I am guessing these were the hard IPs on the instances I stood up. Since the documentation above states these are optional, you have two options here.  Either leave those lines out of your config altogether, or manually set them to the IP Address of the instance you&rsquo;re using. Try each and do which works for you.</p>

<h2>Conclusion</h2>

<p>Your HAProxy Load balancer is now complete and ready to take traffic to the additional catalog compiler nodes. In installment IV, we&rsquo;ll begin to add in more components along the way to a fully developed LEI of Puppet Enterprise.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise - Part II - Installation]]></title>
    <link href="http://questy.org/blog/2017/04/18/scaling-puppet-enterprise-part-ii-installation/"/>
    <updated>2017-04-18T13:03:21-04:00</updated>
    <id>http://questy.org/blog/2017/04/18/scaling-puppet-enterprise-part-ii-installation</id>
    <content type="html"><![CDATA[<p>Installing Puppet Enterprise has been made remarkably easier as time has gone on. The efforts of Puppet Labs (I still can&rsquo;t get used to simply &lsquo;Puppet&rsquo;) to make the installation as seamless and powerful as possible with the simplest of interfaces has been highly successful.</p>

<p>Many changes have occurred over time to include changing from answer files to a <a href="https://docs.puppet.com/pe/latest/config_hocon.html">HOCON</a> formatted <strong>pe.conf</strong> file containing the various configuration elements you may need to stand up an instance. I somewhat preferred the simple nature of the original answer files, but I can see the sense in moving to HOCON moving forward.</p>

<p><strong>Obtain puppet</strong></p>

<p>Needless to say, you&rsquo;re going to need the Puppet Enterprise package to install from. Unlike Puppet Community, the entire installer is provided as a tarball rather than repo based installations via package management, and requires a little bit of UNIX-y knowhow to get it started, as the Puppet Enterprise Server is only installable on Linux.</p>

<p>When you navigate to the Puppet Download page, you may be required to sign up for a free account if you haven&rsquo;t already. The opening download page is found <a href="https://puppet.com/download-puppet-enterprise">here</a>.</p>

<p>You will be presented with a launch page that contains a &ldquo;Download&rdquo; button.  Click the button, and one of two things will happen.  Either you will be directed to a &ldquo;Thank You&rdquo; page or a page to sign up for an account. As you can see, the &ldquo;Thank You&rdquo; page means you already have an account and are signed in whereas the signup page is self-explanatory. Sign up for an account, and retry the download link.</p>

<p>Once you&rsquo;ve made it to the &ldquo;Thank You&rdquo; page, there are three tabs containing &ldquo;Puppet Enterprise Masters&rdquo;, &ldquo;Puppet Enterprise Agents&rdquo;, and &ldquo;Puppet Enterprise Client Tools&rdquo;. As of this writing, the only supported Puppet Master platforms are RedHat 6 &amp; 7, Ubuntu 12.04, 14.04, and 16.04, as well as SLES 11 and 12.</p>

<p>If you had intentions of running the Puppet Master server on any other platform, here is where you realign your expectations.  :)  I have heard that people have hacked the server to run on other platforms, but since we&rsquo;re dealing with Puppet Enterprise, why would you break support and eliminate warranty?  Pick one of the three and download the tarball for your appropriate platform.</p>

<p><strong><em>NOTE:  If You need legacy versions of PE, you can download those <a href="https://puppetlabs.com/misc/pe-files/previous-releases">here</a>.</em></strong></p>

<p><strong>Installation</strong></p>

<p>For the purposes of this scenario, we will be installing the Puppet Infrastructure for fictional super-mega huge company &ldquo;example.com&rdquo;. I am going to trust you have worked out the DNS/Host file naming structure, and can resolve everything everywhere.  If you cannot, don&rsquo;t comment on the post, as I will make fun of you publicly&hellip; you deserve it.</p>

<p>My assumed setup will be:</p>

<p><img src="http://cvquesty.github.io/images/node_list_example_com.png" alt="Example.com Node List" /></p>

<p><strong><em>Automated</em></strong></p>

<p>The Puppet Enterprise Installer is a GUI web-browser based installer. Puppet has gone through the process of giving you a nice frontend to your installation, and making it dead-easy to perform a monolithic as well as split installation.  For our purposes, though, we will be doing a &ldquo;split&rdquo; installation.</p>

<p><strong>Stand up 3 Nodes with the specifications from the first article in the series as follows:</strong></p>

<p><img src="http://cvquesty.github.io/images/split_node_list.png" alt="Split Node List" /></p>

<p>In my experience, I&rsquo;ve found it much easier to exchange root keys between all three of the above nodes to allow the installer to do all it needs to do on each node. You can, however, decide to set the root password to something temporary to hand to the installer as well (and many people opt for this) and then return root&rsquo;s password to your site default.  In any event, all the machines should be able to resolve themselves and each other by name and root should be able to freely ssh between them either via shared keys (easiest) or password.</p>

<p><strong>Transfer the package to the Puppet Master node:</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>scp -rp puppet-enterprise-2015.3.2-el-7-x86_64.tar.gz root@master.example.com:/root/</span></code></pre></td></tr></table></div></figure>


<p>Once the package is on the destination machine, you should connect to the machine to work with the package on-box:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@master.example.com</span></code></pre></td></tr></table></div></figure>


<p>which places you in the root user&rsquo;s home directory where you copied the package.</p>

<p><strong>Extract the Package</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -zxvf puppet-enterprise-2015.3.2-el-7-x86_64.tar.gz 
</span><span class='line'>cd puppet-enterprise-2015.3.2-el-7-x86_64</span></code></pre></td></tr></table></div></figure>


<p><strong>Run the Installer</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./puppet-enterprise-installer</span></code></pre></td></tr></table></div></figure>


<p>You will receive a text prompt that states:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>??Install packages and guided install [Y,n]</span></code></pre></td></tr></table></div></figure>


<p>Simply press &ldquo;Y&rdquo; or the [Enter] key and the GUI portion of the installation will begin.</p>

<p><strong><em>GUI Installer</em></strong></p>

<p>Once you have started the Installation, the Puppet Enterprise Installer will perform some preparatory steps and then launch an installation interface on your master node on port 3000. To access this interface, you can bring it up in the web browser of your choice at:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://master.example.com:3000</span></code></pre></td></tr></table></div></figure>


<p>Navigate to this interface in your Internet browser. When you first arrive at the GUI installer, simply click the &ldquo;Let&rsquo;s Get Started&rdquo; button. On the next page, select &ldquo;Split&rdquo; to begin the Split Installation.The Puppet Enterprise Installer will present you with a GUI questionnaire to fill out regarding your environment. The following is that process in order by section.</p>

<h2>Puppet Master Component</h2>

<ol>
<li><p>Choose the &ldquo;Install on this Server&rdquo; radio button.2. Enter the name of your Master in the <strong>Puppet Master FQDN</strong> text box. (e.g. master.example.com) 3. Enter all appropriate names for your master in the <strong>Puppet Master DNS Aliases</strong> text box.4. Select the &ldquo;Enable Application orchestration&rdquo; check box.## PuppetDB Component</p></li>
<li><p>Enter the hostname of your PuppetDB Node in the <strong>PuppetDB Hostname</strong> text box. (e.g. puppetdb.example.com)</p></li>
<li>Change no other selections under the remainder of the items for this section.</li>
</ol>


<h2>PE Console Component</h2>

<ol>
<li>Enter the hostname of your Puppet Console in the Console Hostname text box. (e.g. console.example.com)</li>
<li>Change no other selections under the remainder of the items for this section.</li>
</ol>


<h3>Database Support</h3>

<p>No changes are needed to is section. Simply leave &ldquo;Install PostgreSQL on the PuppetDB host for me&rdquo; selected.</p>

<h3>Console &lsquo;admin&rsquo; User</h3>

<p>Enter the password you would like to use for the Puppet Enterprise console once your installation is complete in the final text box.</p>

<h2>Final Considerations</h2>

<p>After completing the final section, click the &ldquo;Submit&rdquo; button, and the Puppet Enterprise Installer will present you with a confirmation page for you to review before commencing the installation based on the configuration elements you just provided to the installer.</p>

<p>If everything is to your satisfaction, click the &ldquo;Continue&rdquo; button and the Puppet Enterprise Installation will begin.The Installation progress summary will continue to update you as to the progress of the installation. If you would like to see logging &ldquo;as it happens&rdquo;, you can click the &ldquo;log view&rdquo; button to see that in real time. If you would like to switch back to the summary, simply click the <strong>Summary</strong> button.After what is roughly 10-15 minutes of installation and configuration, the installer will have completed all its work, and you will be presented with a button at the bottom of the progress screen you have been viewing that says: &ldquo;Start Using Puppet Enterprise&rdquo;.  Click that button, and the installer will redirect you to the PE Console login screen.  Enter the admin credentials you created earlier, and you are ready to begin working with the console as needed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Scaling Puppet Enterprise]]></title>
    <link href="http://questy.org/blog/2017/04/17/scaling-puppet-enterprise/"/>
    <updated>2017-04-17T16:06:11-04:00</updated>
    <id>http://questy.org/blog/2017/04/17/scaling-puppet-enterprise</id>
    <content type="html"><![CDATA[<p>In my former life as a consultant, I had to install all manner of configurations of Puppet for clients.  Some were small and some were large, but none were <strong><em>VERY</em></strong> large.  One of the big things I was finding back then was there just wasn&rsquo;t a lot of publicly available information regarding doing a full install and scaling it large.</p>

<p>So, I took some &ldquo;research time&rdquo; on my own and started to build out the configurations according to Puppet Labs' (at the time&hellip; now just &ldquo;Puppet&rdquo;) documentation. The problem I was having was that the docs wouldn&rsquo;t ever lead me to a successful install following a chronolgical set of steps. I had to click into subpages, jump over to sub-sub configurations, and then jump back to the main docs to follow yet another trail down until I reached the end&hellip;lather, rinse, repeat.</p>

<p><strong>Some Caveats..</strong></p>

<p><strong>First</strong>, this is probably no longer a good &ldquo;HOWTO&rdquo; unless you&rsquo;re installing an older Puppet Enterprise. It was created between 2015.2 and 2016.x, and likely has some amount of artifacting related to those versions.</p>

<p><strong>Second</strong>, I&rsquo;m going by docs I&rsquo;ve recorded for my own use.  I wrote these as mentioned above through prototyping, tearing it down, starting again, and literally doing the entire install over and over until it worked &ldquo;as advertised&rdquo;. A lot of this was really just ordering things the right way, and finding documentaiton for various pieces online at Puppet&rsquo;s documentation site as well as blogs, conversations, and plain old trial and error. I certainly can&rsquo;t warrant anything to anybody for any reason. As with most open source/creative commons assets, &ldquo;it works for me, hope it works for you, and if it doesn&rsquo;t, sorry about that.&rdquo;</p>

<p><strong>Finally</strong>, I hope to use this as the springboard to start brain-dumping all my old notes, conversations, ideas, and other prototyping I did in my home lab.  There&rsquo;s still a fair amount of documentation I cannot use or touch because they belong to my former employer or Puppet Labs, so some things may be less than clear and usually because I&rsquo;m dancing around an NDA, noncompete, or just plain being a nice guy. If I inadvertently reveal something I shouldn&rsquo;t, chances are it could disappear without a trace, but I&rsquo;ll still make a note that I removed something, and try and replace whatever it is with published docs.</p>

<p>In short: I want to help the community, but I&rsquo;m walking a tightrope here, so please be kind.</p>

<p><strong>Format</strong></p>

<p>I hope to start easy with a decision making process for installing Puppet, how to choose a method, think about scale, and will likely have quite an opinionated view at times.  Once PE is installed, we&rsquo;ll add compilers, scale postgres, etc. but for starters, I hope to just have the following:</p>

<p>PE Master (MoM)<br>
Puppet DB<br>
PE Console<br>
HA Proxy Node for Compilers<br>
Two Catalog Compilers<br>
One ActiveMQ Hub<br>
Two ActiveMQ Spokes<br>
Two Agent Nodes for testing<br></p>

<p>I know that&rsquo;s quite a number of nodes to get started with, but this after all a large environment infrastructure, and we want to scale big.</p>

<p><strong>Required Nodes</strong></p>

<p>To put together all the required components for a good large installation, I&rsquo;ve settled on the below specs. You can change those as you see fit, but note that some of the disk space requirements and related were due to Puppet&rsquo;s documented requirements <em>at the time</em>.  YMMV, of course, but this is what I consider to be a base level installation if you intend on scaling into the multiple tens of thousands of nodes. Be sure that if you&rsquo;re going to size this down that you&rsquo;re still meeting Puppet&rsquo;s needs in regards to memory, cores, and disk.  <em>(for a current listing of Puppet&rsquo;s reuqirements, you can look <a href="https://docs.puppet.com/pe/latest/sys_req_hw.html">here</a> for more information.)</em></p>

<p><img src="http://cvquesty.github.io/images/prerequisites.png" alt="Puppet_Prerequisites" /></p>

<p>In addition, you&rsquo;ll need to be aware of firewall requirements for such an installation.  Puppet has documentation regarding firewall configurations and needed ports at their website <a href="https://docs.puppet.com/pe/latest/sys_req_sysconfig.html#for-large-environment-installations">here</a>, but I&rsquo;ll insert the image and recount the requirements here.</p>

<p><img src="http://cvquesty.github.io/images/lei_port_diagram.png" alt="Firewall_Ports" /></p>

<p>In short:</p>

<p><img src="http://cvquesty.github.io/images/firewall_ports.png" alt="Firewall_Ports" /></p>

<p>This is a close approximation to what you need to know.  Detailed charts found in the above links, and a &ldquo;point-by-point&rdquo; port and use list is available to review.</p>

<p>In short, I&rsquo;ve found it easiest to have all PE components on the same VLAN with no restrictions between them. If you are going to have a local firewall turned up on each node, you&rsquo;ll need to manage all the above communications as you see fit, but for the serving infrastructure (if in a secure environment, of course) you can likely drop host firewalls in favor of corporate ones.  In short, make it as easy on yourself as you see fit while balancing that toward your corporate security policy.</p>

<p>Finally, make sure DNS and NTP are all ready to go.  I can&rsquo;t tell you the number of times I&rsquo;ve had major issues trying to get all this working, and NTP was off, or DNS didn&rsquo;t propagate as expected (it&rsquo;s always DNS, right?) or some other similar seemingly unrelated piece was not restarted or some such. Just make sure that all nodes resolve to their respective FQDN from all nodes. Obviously, the easiest way to do this is to simply put them all in DNS. You <strong><em>can</em></strong> manage the host files manually, but why would you want to do that?</p>

<p>If you&rsquo;re at this point and all ready to go, look to the next entry to get started.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changes Are Afoot]]></title>
    <link href="http://questy.org/blog/2016/08/31/changes-are-afoot/"/>
    <updated>2016-08-31T10:33:00-04:00</updated>
    <id>http://questy.org/blog/2016/08/31/changes-are-afoot</id>
    <content type="html"><![CDATA[<p>After much thought and consideration, I&rsquo;ve terminated my employ with ShadowSoft. I was travelling nearly every week all over the US, and not with my family as much as I&rsquo;d like. Unfortunately, this role was a 70% travel role, and our youngest needed Daddy home.</p>

<p><img src="http://cvquesty.github.io/images/paypal.png" alt="PayPal" /></p>

<p>As luck would have it, a totally awesome telecommute FT/Perm option came up with PayPal, and I accepted rather excitedly, and began that role today.  After some getting acquainted with my new duties, you should be seeing/hearing more from me on the Puppet front soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Travel Hiatus]]></title>
    <link href="http://questy.org/blog/2016/06/13/travel-hiatus/"/>
    <updated>2016-06-13T10:06:29-04:00</updated>
    <id>http://questy.org/blog/2016/06/13/travel-hiatus</id>
    <content type="html"><![CDATA[<p><strong>Out</strong></p>

<p>Just a quick update for you all. $work decided at some point that one of the things I was specifically hired for (blogging in the community) some sort of way &ldquo;gives away the farm&rdquo; in regards to Puppet, Puppet Consultation, and related items. As such, I&rsquo;ve been asked not to blog publicly regarding items we deliver as services.</p>

<p>:-(</p>

<p>It likely doesn&rsquo;t matter that much, as I&rsquo;m travelling more than I have in years, and am on-target to exceed 145k miles by Summer&rsquo;s end.  As a result, I will be laying off until I can regroup and find more time.</p>

<p>Sorry, but as they say &ldquo;them&rsquo;s the breaks&rdquo;.</p>

<p>If you need me, you can always find me on the Puppet community Slack Channel #puppet, and my nick there is @cvquesty.</p>

<p>Look for interesting news from me soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PuppetConf 2015]]></title>
    <link href="http://questy.org/blog/2015/10/27/puppetconf-2015/"/>
    <updated>2015-10-27T22:11:28-04:00</updated>
    <id>http://questy.org/blog/2015/10/27/puppetconf-2015</id>
    <content type="html"><![CDATA[<p><strong>PuppetConf Portland</strong></p>

<p><img src="http://cvquesty.github.io/images/logo.jpg" alt="PuppetConf" /></p>

<p>Ahh, Portland! What a great place to have PuppetConf this year. The home of Puppet Labs and all its varied food, drink, and other unnamed consumables give Portland a vibe like no other.</p>

<p>From the hipster eateries to the burger dives around town, Portland offered something for everyone.</p>

<p>My week began by arriving a tad early for the Puppet Certifed Consultant training day. On the way in, I passed this little beauty right here:</p>

<p><img src="http://cvquesty.github.io/images/mountain.jpg" alt="Mountain" /></p>

<p>I had forgotten just how beautiful the Pacific Northwest can be.</p>

<p>In our meetings before the conference began in earnest, we talked about things announced and things as yet unannounced, and essentially just learned how to be better consultants and puppeteers. It was nice to be able to ask the questions that arise from time to time of the “big boys” (Gary Larizza, Zak Smith, etc.) and get first-hand accounts on how to do better.</p>

<p>There were quite a number of really cool talks on various upcoming tech, that I had quite a bit of opportunity to take notes and build upon knowledge I’d already gained.</p>

<p><strong>Keynotes!!</strong></p>

<p><img src="http://cvquesty.github.io/images/keynote_wide.jpg" alt="KeynoteWide" /></p>

<p>Next up was the PuppetConf Keynotes for the first day that usually contains Luke Kanies' annual Puppet conversation. Where they’ve been, what they’re doing, and the roadmap forward was fodder for Luke’s talk, and you can find the complete Keynote <a href="https://puppetlabs.com/presentations/puppetconf-2015-lukes-keynote-address">here</a>:</p>

<p>The big synopsis I can give is all about application automation. For you Puppeteers out there, just think of the relationships between the File|Package|Service component “types” and apply that to application components (db, web, container, Java App, etc.) and you get the gist. Very cool, very powerful, and very near. Be looking for Puppet Enterprise 2015.3 to drop in the very near future. I’ll certainly have soe blog things to say when that happens.</p>

<p>I appreciate, once again, my employer <a href="http://shadow-soft.com">Shadow Soft</a> sending me out to PuppetConf to be the best engineer I can be, and learn all the new tricks and tools at my disposal while on the road.</p>

<p>Look for me to pick up where I left off with basic tools, and a revamp of my early-on configuration tutorial for Puppet Community with the new tools and features in Puppet 4 soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Software Releases and Forge Stuffs]]></title>
    <link href="http://questy.org/blog/2015/07/28/some-software-releases-and-forge-stuffs/"/>
    <updated>2015-07-28T10:11:55-04:00</updated>
    <id>http://questy.org/blog/2015/07/28/some-software-releases-and-forge-stuffs</id>
    <content type="html"><![CDATA[<p><strong>Salutations</strong></p>

<p>First of all, hello from sunny and hot New York. I’m on engagement for my company doing some Puppet goodness in the Northeast.</p>

<p>In my downtime at night, Ive been wrapping up some work I’ve had on my plate for awhile (my Puppet module destined for the Puppet Forge) and generally studying for various topics if for no other reason than to get better.</p>

<p>As I was preparing my new module, Puppet releases the Puppet4 Enterprise release that now follows new semantic versioning schemes, and follows the scheme:</p>

<p>Puppet Enterprise YYYY.VV</p>

<p>where “V” is version number.</p>

<p><strong>Puppet Enterprise</strong></p>

<p>As many of you know, I’ve been maintaining a project for Puppet prototyping and working with development and testing over a Vagrant instance for some time. I created what I have because I needed something I could share with customers to help facilitate coding and iteration without their touching the production instance unless absolutely necessary.</p>

<p>Thus, my projects were born.</p>

<p><strong>Vagrants. Vagrants Everywhere.</strong></p>

<p>In a nutshell, I configure a Vagrant environment on a modern OS. I create 4 nodes. One is the Puppet Master itself and the remaining three are Puppet agents that check in with the master and are in three faux envirnments: “Production”, “Testing”, and “Development”. As a result, you can code for DEV and iterate the heck out of it. Once you like it, you can merge up the tree into testing and finally to production.</p>

<p>These releases have been followng the format:</p>

<p>[OSNAME]|[VERSION NUMBER]-[PUPPET][PUPPETVERSION]</p>

<p>So, for instance, a release for CentOS5 running Puppet Open Source 4.0 would look something like this:</p>

<p>centos5-po4</p>

<p>Make sense?</p>

<p>Well, as of today, my new release will be CentOS7 with Puppet Enterprise 2015.2. It can be found here.</p>

<p><strong>Puppet Forge Module</strong></p>

<p>I’ve also been working on two separate modules for the forge here recently. The other I’ve been working on longer, but this one was just ready first. I call it “PuppetDev”.</p>

<p>The idea behind the PuppetDev module is that sometimes a company who needs to do Puppet Development has corporate policy against using a tool like the Vagrant instances (i.e. virtualization on the desktop) mentioned above. As a result, the company often will set up a centralized development host that people can login to for developing Puppet code.</p>

<p>Often times, though, when starting out, a user can feel overwhelmed at the simple command line in front of them, and even if they get into an editor, they may not know where to start with syntax highlighting and the like.</p>

<p>It was from this need PuppetDev was born. You simply apply the module to a node, and supply the user/group you want to apply the module to as parameters, and it whirls away and sets up their development environment.</p>

<p>Among the toys they get with the release are syntax highlighting, an easier to read colorscheme, a Vim plugin infrastructure, and all manageable by the Puppet Administrator for the site.</p>

<p>I know it’s a rather narrow use case, but there it is… feel free to check it out here, or if you’re so inclined, on your Puppet master you can simply run puppet module install cvquesty/puppetdev.</p>

<p>That’s all I have for this update, but hope to be a little more active here shortly with my next Forge module.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Organizing Your Hierarchy Equals Pain]]></title>
    <link href="http://questy.org/blog/2015/05/15/organizing-your-hierarchy-equals-pain/"/>
    <updated>2015-05-15T17:48:59-04:00</updated>
    <id>http://questy.org/blog/2015/05/15/organizing-your-hierarchy-equals-pain</id>
    <content type="html"><![CDATA[<p><strong>The Pain Point</strong></p>

<p>One would think after reading Gary Larizza’s blog that I wouldve come away with the idea that Hiera presents a few issues as it solves a ton… but no. I had to go and think it was easy, fly off half-cocked and try and tackle a big issue or two, unprepared mind you, and here I am… re-discovering what humility should be like.</p>

<p><strong>The Problem</strong></p>

<p>Hiera looks simple. Disarmingly simple. However, the pain doesn’t come in just looking at a nice, default hiera.yaml:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>:backends:
</span><span class='line'>- yaml
</span><span class='line'>:hierarchy:
</span><span class='line'>- “%{clientcert}”
</span><span class='line'>- “%{environment}”
</span><span class='line'>- common
</span><span class='line'>:yaml:
</span><span class='line'>:datadir: “/etc/puppetlabs/puppet/environments/%{environment}/hieradata”</span></code></pre></td></tr></table></div></figure>


<p>We can simply look at this and see the wonderful simplicity of how the yaml file is laid out, the ease of adding more hierarchies from which to gain data, and even expand the model to include subdirectories and all sorts of interesting methods of organizing and abstracting our code into usable, organized chunks.</p>

<p>Not so fast.</p>

<p>The real issues begin when you’re dealing with a customer. All too often I find that even they aren’t entirely sure what’s going on in their very own environment, and pushed hard, will actually argue among themselves as to just how everything works. Scary.</p>

<p>The main thing we find ourselves doing is figuring out that last mile… What precisely is the role of machine X in this environment? Ask two people separate from each other, and they’ll likely give different (sometimes remarkably so) answers. Get them together and they may quibble a bit, but generally get to consensus.</p>

<p>This is REALLY, REALLY important. If the folks you’re trying to help aren’t 100% sure exactly:</p>

<p>What a machine does
How a machine is built
What it’s role in the organization is
You’ve got some real issues.</p>

<p><strong>This Doesn’t Suck</strong></p>

<p>Often, engineers look at the Hiera configuration file in a vacuum (so much for the suck joke). Not permanently but definitely independently at first. Then, as the engagement pushes on to defining Roles and Profiles for the site, you have this “oh crap” moment, and throw back to the hierarchy and then start modifying lookup layers, but then jump forward to the profiles where the lookups are (or should be, anyhow) and realize they assumed a different hierarchy. Then, jump back to the hiera.yaml, make changes, then back to the profiles and repeat the process and then finally to the component modules, and remediate any assumptions you made on everythin gyou just changed. Uh oh. Wasted time.</p>

<p>I’ve started working through “all the things” and have come up with a mechanism that works well for me. Hopefully you can gain some mileage from it as well.</p>

<p><strong>First Thing’s First</strong></p>

<p>Some would argue you should do the Hierarchy first while others would argue you do the Profiles first. However, I’ve found that parsing out all the business logic with the team gains a remarkable amount of runway for you to start. Why?</p>

<p>Systems engineers are techno-nerd types. The nuts &amp; bolts, configs and the like are their prime concern and more often than not, they view the site atomically. They can tell you with great detail precisely what each and every machine has installed on it (often…not always), but generally know what the IT ROLE of a node or collection of nodes is for. Further, they can tell you who requested it, what kind of storage may be connected, what business group out there it satisfies the needs of, but with a startling amount of frequency, cannot tell you the BUSINES ROLE of the node.</p>

<p>Q: What is it?<br>
A: A web server.<br>
Q: What’s it’s purpose?<br>
A: To serve web documents, duh!<br>
Q: No, no… what’s it’s business purpose?<br>
A: To make money?<br>
Q: No, no… If you were to give it one overarching purpose, one reason for existing, what would it be?<br>
A: Oh… ummm… I never thought of that before.<br></p>

<p>You’d be surprised just how often you arrive there with pretty much everyone.</p>

<p>As a result, if you wait until mid-engagement to reach this point, (or at least the middle of the writing phase), you’ve got a fair amount of backtracking, and even refactoring to do before you regain some sense of normalcy and can push forward.</p>

<p><strong>Most Specific to Least</strong></p>

<p>As has been said many times and in many ways, your MOST specific designation should always come first. For instance, what is the MOST atomic level of abstraction? Well, the node itself, of course, so the %{clientcert} designator suffices for that.</p>

<p>Well, what’s next? That depends on you. You might have a location to think of (is this data center on the east or west coast, US or Asia). That’s highly broad… maybe not. It might be environment (such as DEV, TEST, PROD). Again, this is custom to you, and that might still be overly broad and you need to find a happy place between clientcert and environment. Only you can tell me that when I’m standing in front of you, so I generally refrain until I can get the layout of your site.</p>

<p>For instance, one customer had clientcert, then location, then environment. That way, items unique to the data center the nodes were in would get handled first, and then things that were environment unique (regardless of location – more broad) could get handled next. See? Custom to them and the way they do business or are arranged technologically.</p>

<p>I “borrowed” the name for this post from Bill Engvall to illustrate a point, that if you just run off to development with no prior knowledge of the things Hiera works with, you will encounter the pain of refactoring at what is most likely the component module level and then the profile level as well. If you’ve ever had to do it, and then do it on a time crunch, truly you have felt the pain.</p>

<p>Avoid it. Think before you act.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppets.. Puppets Everywhere]]></title>
    <link href="http://questy.org/blog/2015/04/30/puppets-dot-puppets-everywhere/"/>
    <updated>2015-04-30T12:52:27-04:00</updated>
    <id>http://questy.org/blog/2015/04/30/puppets-dot-puppets-everywhere</id>
    <content type="html"><![CDATA[<p><strong>3.8 is Here!!!</strong></p>

<p>That’s right, kids. PE 3.8 has dropped, and it is quite tasty. Some highlights:</p>

<p><strong>AWS Module Now a Supported Module</strong></p>

<p>As simple as that sounds, it’s huge. Being able to stand up multiple, tens, even hundreds and thousands of servers into AWS at once with Puppet is a great thing, but to have the module supported by Puppet Labs Support is even better.</p>

<p><em>Docker Containers??</em></p>

<p>Indeed. The Node manager now “gets” Docker containers and you can provision from bare metal as needed. Once the provisioning is done, it hands directly off to Puppet to execute the configuration portion of your run. Seet, sweet sauce right there.</p>

<p><em>Bare Metal</em></p>

<p>You’ve always been able to foray into the world of bare metal provisioning, but now it too is supported for you. You can stand up OSes, hypervisors, and then hand those off into the config run using Razor. Razor is now core to PE and also supported by the Puppet Labs Support Team.</p>

<p><em>Code Management</em></p>

<p>A long time coming, you can also manage code deployment to your Puppet Master using r10k, installed by default. Newly dubbed the “Puppet Code Manager”, r10k remains a command line tool, but I hear rumblings there may be some GUI juice on the horizon for this.</p>

<p><strong>Deprecations</strong></p>

<p>As with any release, some Puppet Enterprise features are going the way of the Dodo Bird. Some expected, some surprising, Puppet Enterprise’s landscape is certainly changing.</p>

<p><em>Cloud Provisioner</em></p>

<p>Long decried as a weak part of the PE infrastructure, the newly announced AWS Supported Module renders it redundant, and as such is removed from the shipping product’s default installation. Of course, if you have a large infrastructure that leverages the Cloud Provisioner, you can continue to use it by installing it into PE separately.</p>

<p><em>Live Management</em></p>

<p>Live management, a long-standing feature of the Enterprise Console, is now also deprecated. Of course, with the new code management features “baked-in” to Puppet Enterprise through r10k, Live Management is somewhat redundant. However, Puppet Labs notes that they will be releasing improved resource management functionality in future releases. If you need Live Management, then just as you can with the Cloud Provisioner, you can turn it on as well in the 3.8.0 product.</p>

<p><strong>Compatability</strong></p>

<p>Finally, some older versions of supported OSes are no longer so, and the list is as follows:</p>

<p>centos-5-i386<br>
centos-5-x86_64<br>
centos-6-i386<br>
debian-6-i386<br>
debian-6-x86_64<br>
debian-7-i386<br>
debian-7-x86_64<br>
oracle-5-i386<br>
oracle-5-x86_64<br>
oracle-6-i386<br>
redhat-5-i386<br>
redhat-5-x86_64<br>
redhat-6-i386<br>
scientific-5-i386<br>
scientific-6-i386<br>
sles-11-i386<br>
ubuntu-1004-i386<br>
ubuntu-1004-x86_64<br>
ubuntu-1204-i386<br>
ubuntu-1404-i386<br></p>

<p>I’m sure you may have some of these in your infrastructure, but they’re usually the result of a vendor application’s supported platforms. If so, you may wish to communicate back upstream to your various vendors, because when you upgrade PE, these go away for you.</p>

<p><strong>Try It Out</strong></p>

<p>As usual, I’ve already created a Vagrant instance to allow you to test and work with the new PE, testing out your existing code on the new platform. Check it out on my GitHub here.</p>

<p>Let me know if you find any issues, and happy Puppeting!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Coding Work of Late...]]></title>
    <link href="http://questy.org/blog/2015/03/26/some-coding-work-of-late-dot-dot-dot/"/>
    <updated>2015-03-26T11:26:16-04:00</updated>
    <id>http://questy.org/blog/2015/03/26/some-coding-work-of-late-dot-dot-dot</id>
    <content type="html"><![CDATA[<p><strong><em>I AM NOT A CODER</em></strong></p>

<p>I know that sounds a little silly with all the Coderwall links over there in the sidebar, but I’m not.</p>

<p>I got into this business as a lowly PC building guy, and worked my way into systems administration through light consulting. A necessary evil of the day was tweaking an autoexec.bat &amp; config.sys to release as much memory to the user as was possible for applications. (This was long before Win95, FYI)</p>

<p>As progress and learning would have it, I landed myself a systems administration job and began to grow. Here, 22 years later, back to consulting (but on a much larger scale), I look back on my professional career and see and realize that there’s a LOT of code behind me. Perl, BASH, ksh, HTML, PHP, light Ruby, old DOS debug scripts, Puppet DSL, Expect scripting… tons of it. All encountered and fleshed out in the context of systems engineering and/or management over the years as situations and needs arose.</p>

<p>Fast forward to today. The juxtapostion of Development, QA, and Operations into one big hairy hard-to-define (but getting clearer) term known as “DEVOPS” is the landscape a new admin comes into, and he or she learns from the very beginning the principles of placing infrastructure definition into code, and working as a developer to enhance and automate the hard infrastructure of the operations world.</p>

<p>I say all that to say this… I’ve got some new releases on my GitHub I’d like to share with you to help you out while navigating in this world of DEVOPS. If you have to call me a coder because of it, I may frown, but it is what it is.</p>

<p><strong><em>Vagrant/Virtualbox Fun</em></strong></p>

<p>As I’ve been slowly revealing through my series in past months, there’s a lot of tools out there for working with Puppet and there’s a ton of the same to prototype for your company’s environment. One of these is Vagrant, and it has the ability, in a huge way, to help you automate the setup and teardown of sample infrastructures to work with your Puppet code in. I’ve just updated and released a few of these, and I want to tell you about them.</p>

<p><strong>Vagrant with CentOS 6.5 and PE 3.7.1</strong></p>

<p>If you look here, you’ll find my current project I use with customers. This is a Vagrant instance that turns up a 4-VM environment including a PE Master, a DEV, TEST, and PROD VM running the PE agent, Enterpise Console, Directory Environments pre-configured, r10k configured, and a simple set of Puppet Modules to get you started.</p>

<p>Most commonly, I share those with customers, coworkers, and community folks to get them started coding right away, and to have a platform with which to teach them how to deploy, merge, and promote code through an environment in a smaller version of wat they might already have in their company. This is the enviroment I spoke about at the Atlanta Puppet User’s Group last year in its current iteration.</p>

<p><strong>Vagrant with CentOS7 and PE 3.7.2</strong></p>

<p>Similarly, you can find a CentOS7 + PE 3.7.2 project here. Much like the above, you get the latest of PE with CentOS7 to help your prototyping over a more current OS.</p>

<p><strong>Vagrant with CentOS7 and Puppet OSS 4</strong></p>

<p>If you look up the word “experiemental” in the dictionary, this project right here is linked as an example.</p>

<p>I’ve gotten a very rudimentary working setup of a Master and one agent to install completely and autosign, and haven’t even scratched the surface of all the new goodies in Puppet 4. As Puppet 4 is still in Beta, this is not recommended in any way for any reason at any time for you to use for any purpose. :)</p>

<p>My hope here is to prepare myself for the PE4 features long before they’re released. I hope to work on getting directory environments and r10k working for this only to have a base from which to rapidly develop for PE4 when it’s released. <strong>EXPECT THIS ONE TO GO AWAY IN FAVOR OF THE NEW PROJECT.</strong></p>

<p><strong>YOU HAVE BEEN WARNED</strong></p>

<p>I hope these projects assist you in rapidly creating a platform and developing for Puppet. If you have any questions, don’t hesitate to contact me via jsheets@shadow-soft.com, quest@questy.org, or one of the many other social media nexii you have available to you.</p>

<p>As always, these are in active, deep development. If you’ve got some Vagrant chops and/or want to contribute in any way, feel free to do pull requests, and I’ll integrate changes as soon as I’m able between customer engagements and/or other duties I may have here at Shadow-Soft.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Your Toolbox]]></title>
    <link href="http://questy.org/blog/2015/03/26/building-your-toolbox/"/>
    <updated>2015-03-26T09:15:18-04:00</updated>
    <id>http://questy.org/blog/2015/03/26/building-your-toolbox</id>
    <content type="html"><![CDATA[<p>I know it’s been since June we’ve worked on the Puppet Development series, but as work goes, so go I, and as I go, so delays the blog. :)</p>

<p><strong>Recap</strong></p>

<p>We started our journey with a reintroduction to Vim. As strange as it sounds, often times we techno-guys take for granted that people coming into the DEVOPS space are well versed in all these things, and overlook remediating the basics. We covered Vim basics and switching between command and insert mode as well as linking you to some good cheat sheets to help you beef up your vim-fu.</p>

<p>Next, we covered Vim plugins for syntax highlighting and just general code visualization so we can see visually when our code editing has issues and needs to be fixed.</p>

<p>The next article centered on revision control in general, but Git in particular. In addition to using Git, we also covered that amazing tool GitHub and how to get registered for it, create your own repos, and how to work with repos from your local command line as well and I linked you some excellent resources on Git to expand your knowledge of the Git world and become proficient and fluent in its use.</p>

<p>Finally, we got around to Vagrant and I gave you a simple tour of Vagrant to be familiar with the tool and what it does for you. We stood up a Vagrant instance and saw how we could destroy and re-provision that precise same instance with only a shell command, and saw the power of automated provisioning at work right on our own node.</p>

<p><strong>Reasons</strong></p>

<p>Like the social media world will tell you, I did it because reasons. In short, I wanted you familiar with all these separate tools as we start to coalesce them into an integrated whole we can use as our development toolbox.</p>

<p>So, since we’ve got Vim, Git, and Vagrant as needed components, what else might we need to continue pressing forward?</p>

<p>We need to understand <strong><em>Puppet</em></strong> itself.</p>

<p><strong>Puppet - The Product</strong></p>

<p>Puppet, as I’m sure many of you are aware, is simply “configuration management software” produced by Puppet Labs, Inc. Puppet Labs was founded in 2005 by then Systems Administrator/Engineer Luke Kaines to help automate common repetetive tasks encountered in his regular work duties encoutered on a day-to-day basis.</p>

<p>After a few rounds of venture funding and explosive growth of the market segment known as “configuration management”, Puppet Labs has become a market leader in the space, and continues to develop and improve upon the product at a rather aggressive rate.</p>

<p><strong>Configuration Management</strong></p>

<p>If Puppet is “configuration management” software, what is this thing called “configuration management”?</p>

<p>Configuration management as a systems engineering process covers a lot of landscape in its purview. It can mean, speaking generally, a process for maintaining consistency of a product’s performance and can become considerably complex, such as the methodology used to manage miliary weapons systems, IT service management, and other domain models covering civil and industrial engineering.</p>

<p>For the purposes of the technical field of Systems Administration, Engineering, and Automation, however, Configuration Management as a discipline is very well defined. Specifically, the model that covers these areas is Operating System Configuration Management. Certainly, when automating your site you step over into additional disciplines, but at its core, Configuration Management almost always implies that you are working with the primary target of Operating Systems Configuration Management.</p>

<p><strong>IT Automation</strong></p>

<p>Often times, configuraiton management as it is expressed in the realm of operating systems more specifically begins to take on automation as the primary characteristic of the work performed. From provisioning to deployment, automation saves the most time and effort through modeling systems design in a modular fashion, whereby allowing you to apply systems configurations against classes of machines tooled to perform specific types of work.</p>

<p>This paradigm allows for many idioms to be used in the description of the destination machines, and is the primary domain within which products like Puppet operate.</p>

<p><strong>Puppet – the Product</strong></p>

<p>As you peruse the main website for Puppet Labs, you start to see a much larger emphasis and prevalence of “IT Automation” throughout the website–specifically in the area of data center automation. It is important to note that Puppet prefers to work within this space, although it has abilities that stretch into the entire IT lifecycle workflow.</p>

<p>Puppet is comprised of two distinct products: “Puppet Enterprise” and “Open Source Puppet”. As is common in the Open Source space, the distinction between the two is defined primarily by way of the support options available for each.</p>

<p><strong>Puppet Enterprise</strong></p>

<p>The Puppet Labs flagship product is Puppet Enterprise. Puppet enterprise is a fully supported, maintained, and actively developed data-center ready software package designed to enable you to model configurations for your site out-of-the-box. It has an integrated installer, smoothing the installation process, a series of Puppet apps available for use in the Enterprise Console (the Puppet GUI), and for-pay support and licensing options to meet the needs of your enterprise, regardless of size.</p>

<p><strong>Open Source Puppet</strong></p>

<p>Open Source Puppet is the core product found within Puppet Enterprise. It is the engine which drives the Puppet product and does the job of configuration modeling against your environment. It has several components, individually installed, and no shipped console. It generally leads the Enterprise version by several revisions, allowing early access to new features and benefits but lacks the additional features afforded by the Enterprise offering.</p>

<p>Make no mistake. Both products are the same software. However, the Enterprise product has much of the legwork done for you in the integrated installer, additional functionality in independently released “Puppet Apps”, and of course, enterprise-level 24x7 support availability. Add to that a vibrant community of development and expansion, the Puppet Forge, an annual conference, and a respected certification program, and Puppet Labs' offerings, while similar, certainly shine on the Enterprise side of things.</p>

<p><strong>Idempotency</strong></p>

<p>The main concept upon which Puppet’s operation is founded is that of idempotency. Idempotence is the property of certain operations in mathematics and computer science that can be applied multiple times without changing the result beyond the initial application.</p>

<p><img src="http://cvquesty.github.io/images/idempotency.png" alt="Idempotency" /></p>

<p>As you can see, this characteristic only applies an effect on the target if and only if it has not already been applied. Subsequent applications will have no effect, as the desired state of the target is as it should be.</p>

<p>This is good news in that it allows us to think of our enviromnet in new ways. Instead of thinking of all the changes we’re making or going to make to our environment, we begin to considered the desired state of our site and the maintenance of that target at all times. Then, “events” are no longer misconfigurations, but instances of deviation from the desired state, the “norm”.</p>

<p><strong>Implications</strong></p>

<p>Think of the ramifications of the shift in mindset this represents. Audit reports are no longer a series of weeks of review of the site. Your site’s state is described in code, and is a public record within your organization for all to see. Instead, those conversations become “We are ALWAYS compliant. Here is a report of the few times we weren’t compliant in the last year.”</p>

<p>Considerably different conversation to have.</p>

<p>Now, as you model more configuration state in code, your entire way you think of your site evolves. More things hapen automatically, are automatically reported on, and are automatically remediated. Your reporting changes. Your audits change. Your compliance reporting changes. In fact, your entire internal culture chages, and all involved teams need to make adjustments in the way they think about the site and how to mold the way they’ve traditionally done their job (whether administration, audit, or compliance) into this new world of DEVOPS, automation, and the like.</p>

<p><strong>Conclusion</strong></p>

<p>Puppet Enterprise and Open Source promise to not only change how you view your systems and site, but how your entire organization functions. From automated configuration expression within the site, to how you originally model your configuration target, the tools provided by Puppet have changed the face of IT. Automation and configuration management bring culture change and ideological evolution to the enterprise, and step you into the next level of efficiency, compliance, and security management.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Management May Be Missing an Important Component of DEVOPS]]></title>
    <link href="http://questy.org/blog/2015/03/23/management-may-be-missing-an-important-component-of-devops/"/>
    <updated>2015-03-23T10:01:01-04:00</updated>
    <id>http://questy.org/blog/2015/03/23/management-may-be-missing-an-important-component-of-devops</id>
    <content type="html"><![CDATA[<p>As I travel around the country installing and training people in Puppet Enterprise, I’m noticing some characteristics of management perspective on the DEVOPS movement that has a disjoint with implementation and reality. In short: Managers are now hiring personnel in the field of DEVOPS for positions they may be highly qualified for, but have no institutional ability to execute on the tasks that will be assigned them in a modern infrastructure especially one that has to meet governance criteria such as ITIL, PCI, SOX, HIPAA, and various STIG requirements we see in governmental circles.</p>

<p>First a story, then an observation…</p>

<p>Early Rumblings of DEVOPS</p>

<p>A number of years ago I was a senior engineer in a large TV/Web property. The team was probably one of the best I’d ever worked with from an operational perspective. What I mean by that, is they not only knew how to do what they knew, but when confronted with requirements on something that did not exist, or had not been built yet, they just built it themselves. (handy to have in the days before ubiquitous workflow engines, automation tools, and deployment mechanisms!)</p>

<p>At the same time, the devlopment team was mostly tiered… Entry level personnel were basic coders, seniors were considerably more integrated into the nuts &amp; bolts of the site and the leads &amp; managers could actually commit. Quite a well organized protectionist strategy to keep the codebase clean and mostly devoid of errors. It was a great setup for a 2000-2002 era development shop. Problem was, it was 2005.</p>

<p>As business goes, eventually newer and more well rounded developers with experience in a new subset of tools and techniques began to be hired, and from their background they might have had elevated privileges in their past environments, the ability to commit at will (or continuously integrate?) and felt as though this somewhat “experienced” development model was archaic and slow. And it was.</p>

<p>Inevitably, one of these nice folks would make their way over to the operations side of the house, usually in despair, looking for ways to make their lives easier, which usually ended up in some sort of altercation over “root” level access to systems throughout the environment they had to touch. One could assume how that conversation would go, ultimately operations could not find a business justification for such a level of access, and the request was denied. This would engender a certain amount of tension between teams, and life would roll on in much the same way.</p>

<p>Finally, one day, one of the best developers I personally have ever had the privilege of working with came on as a contractor. (he would ultimately come on board full time and then become the Sr. Architect for the team) Everything he did would turn to gold. his development models and abilities were changing the way developers would think about what they could do, and methods and procedures were changing, deployment techologies were being tried, workflow engines were making the development side of the house quite modern by all measures.</p>

<p>However, the existing operational model continued along at the early-century norms, and would not/could not budge. Now, this wasn’t due to the fact that there were jerks in the department, no quite the contrary. In scearios where a team is so competent in what they do, they look for ways to script and automate away mundanity. The better the team, the stronger this backbone. The stronger the backbone, the more tendrils get attached the the core until automation and development reaches each and every part of the infrastructure. When the team builds to that level, each part hands off to the other. Centralized data stores provide the API for the site, and to touch any particular part of the infrastructure at the design level affects the entire system. So goes Infrastructure architecture.</p>

<p>Before there was a “DEVOPS”</p>

<p>As you can see, in very real terms, this was a “pre-incarnate” DEVOPS infrastructure. A little more OPS than DEV, but nonetheless automated as was possible.</p>

<p>But these new upstart tools were going to ruin this! Yes, they had promise and could certainly replace large portions of the existing workflow, but it could take months or years to “undo” what had already been done to supplant existing mechanisms with newer, better tools.</p>

<p>And therein lies the road to DEVOPS.</p>

<p>The Climate Today</p>

<p>I tell the above story to illustrate the tensions existent before the rise of DEVOPS and the subsequent automation revolution we’re currently experiencing.</p>

<p>Many times one would love to implement their new tools, but the operational infrastructure would prevent it. Or, lesser-informed development teams would accept no less than the highes level of access into the environment, but modern compliance standards prevent that from happening as well.</p>

<p>The manager that has to navigate this particular problem when hiring or resourcing a need in her infrastructure has quite the task ahead of them. Why? DEVOPS has integrated the two fields at a vector point to a degree whereby it is incredibly difficult to determine where the DEV ends and the OPS begins. Sure, there are considerably more well-defined responsibilities on the extremeties of the respective disciplines, but that joining point threatens to cause dischord in the world of the IT infrastructure and many sleepless nights for the IT manager in trying to nail down his talent needs.</p>

<p>Take the requirements for the “DEVOPS Application Operations Engineer” found on one of the major online employment sites posted just a few days ago for a major metro in the U.S.:</p>

<p>Minimum 4 years' experience in scripting and or any development languages like C#,.NET, Python, Java, Shell, Ruby or any other open source languages.</p>

<p>Experience with HTML/XML and Java Script</p>

<p>Familiarity with Microsoft SCOM, SolarWinds Orion, Keynote, Nagios, Puppet, Chef or other monitoring, SaaS management solutions is desired</p>

<p>Proven experience debugging and troubleshooting software-related issues in a software development or advanced application support position</p>

<p>As you can see, this is a development-heavy position (that, IMO, is all over the map from a requirements perspective), but so goes job descriptions today. Read between the lines, though…</p>

<p>Someone needs a competent developer that isn’t completely freaked out when someone says “Puppet Environment”, “Monitoring”, or “SaaS”, that knows their way around deployment and automation and can get things done. That’s fine. Problem is, this assumes full lifecycle respnsibility when the actuality is that the future employee has a hard-line stopping point beyond which he or she will never be “allowed” to tread due to compliance alone, and that is the breakpoint between DEV and OPS in the DEVOPS world. Consider this:</p>

<p><img src="http://cvquesty.github.io/images/devops.png" alt="DEVOPS" /></p>

<p>There are three clearly defined worlds here, all converging on a singluar point known as DEVOPS. From the development skill and expertise of the developer to the testing and assurance retrospect of the QA Engineer, to the Security and Compliance purview of the Operational Architect, DEVOPS is not a “one trick pony” with a singularity view. It is a methodology that brings together the three worlds in a clear developmental workflow to speed safe and secure deployment with minimal errors into serving infrastructure. As often as people try and push DEVOPS into a development position or into an Operations or QA postion when hiring, success will be limited, and frustration will be the result.</p>

<p>What, Then, Is the Manager Missing?</p>

<p>As has been heavily implied thus far, the manager may be missing the fact that DEVOPS is not a position but a way of doing things. DEVOPS is a methodology, not a granting of rights or abilities. And, if we’re talking about lines of demarcation within groups, DEVOPS is a superstructure of tools built, implemented and designed by the Operational Architectural team to move, implement, and regression test code and associated objects provided by the Development Architectural team with tests, regressions, and automated mechanisms specified by the Quality Assurance Architectural team in a specific fashion and after a specific methodology that has commonly become referred to as DEVOPS.</p>

<p>The manager has to realize that this is not a subset of bullet points on a resume, but a wholistic approach to all of their environmental considerations that requires all teams to cooperate through to the end result: QUality Software Products delivered in as short a cycle as possible in an automated fashion with as few errors and bugs as reasonably can be remediated before going “live”.</p>

<p>The manager who is looking for this methodology in a single position has already lost the battle before ever posting the position.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant and Docker Love]]></title>
    <link href="http://questy.org/blog/2015/01/15/vagrant-and-docker-love/"/>
    <updated>2015-01-15T21:31:15-04:00</updated>
    <id>http://questy.org/blog/2015/01/15/vagrant-and-docker-love</id>
    <content type="html"><![CDATA[<p>Not a full-on post, but more a note for myself to both investigate and test this… It would seem that Vagrant has now added provisioner support for Docker here. Be looking for a new post on this in the near future!</p>

<p>I’m working steadily to start off the new year, so my posting may be somewhat sporadic, but I will continue to blog Puppet fundamentals, supporting tools, and related items as I have the chance.</p>

<p>And in that vein, I encountered something this week I wanted to share with you.</p>

<p>It would seem that the new feature whereby you can include facter facts in a module for pluginsync to distribute them, but using the new mechanism of:</p>

<p>/modulename/facts.d/external_fact</p>

<p>is not 100% reliable when distributing those facts. By this, I mean the following observed behavior.</p>

<p>You create your fact and place it in the above directory. Say, a shell script that gives you a value.
You make your fact executable, and running it natively at the shell works perfectly.
You do a puppet agent run, and the fact syncs to the agent machine, but never becomes available in the facter table.
You find the sync'ed location of the fact (in the losgs from the sync) and run it manually, and it works perfectly.
I spoke with some folks at Puppet just in a conversation describing what I was seeing and they suggested the following workaround:</p>

<p>Make the fact a file resource and place the fact in /etc/puppetlabs/facter/facts.d. This makes the fact available to the facter system, and displays correctly in the facter table and responds to the facter -p as expected.</p>

<p>That’s it for now! Look for more to come on workflows and tools in the very near future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving My Tech Content to GitHub]]></title>
    <link href="http://questy.org/blog/2015/01/08/moving-my-tech-content-to-github/"/>
    <updated>2015-01-08T14:39:12-04:00</updated>
    <id>http://questy.org/blog/2015/01/08/moving-my-tech-content-to-github</id>
    <content type="html"><![CDATA[<p>Happy New Year, all!</p>

<p>Well, you may notice a bit of a change in format &amp; layout. I got tired of fighting the foibles of WordPress. Every few weeks, WordPress decided quite on its own it no longer wished to display my blog for what appeared to be no reason at all.</p>

<p>As such, I’ve moved to Octopress, hosted it at GitHub, and am doing a permanent redirect at it from my site until I can work out both Web &amp; Mail while having my MX stay where it is and having my Web address move to GitHub directly.</p>

<p>In the meantime, all tech posts have been duplicated here, and can be found by navigating the menus.</p>

<p><strong>Note:</strong></p>

<p>Over the next few weeks and months, you’ll see things move around, features being added and removed, themes and plugins changing and/or disappearing as I learn Octopress and figure out all its ins and outs. Please bear with my dist during this time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PuppetConf 2014]]></title>
    <link href="http://questy.org/blog/2014/09/23/puppetconf-2014/"/>
    <updated>2014-09-23T18:19:37+00:00</updated>
    <id>http://questy.org/blog/2014/09/23/puppetconf-2014</id>
    <content type="html"><![CDATA[<p>Glad to be at PuppetConf with #ShadowSoft exploring all the latest and greatest in PuppetLabs.</p>

<p><a href="http://questy.org/images/puppetconf.jpg"><img src="http://questy.org/images/puppetconf.jpg" alt="puppetconf.jpg" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Southeast Puppet User's Group September]]></title>
    <link href="http://questy.org/blog/2014/09/11/southeast-puppet-users-group-september/"/>
    <updated>2014-09-11T23:33:01+00:00</updated>
    <id>http://questy.org/blog/2014/09/11/southeast-puppet-users-group-september</id>
    <content type="html"><![CDATA[<p><a href="http://questy.org/images/puppet_docker.jpg"><img src="http://questy.org/images/puppet_docker.jpg" alt="puppet_docker" /></a></p>

<p>John Ray is bringing the Puppet + Docker goodness in his talk tonight: &ldquo;Deploying Docker Containers with Puppet&rdquo;.  Join us each month at the Shadow Soft offices for the latest in DEVOPS topics and information.  Always fun, lots of discussion and information surrounding Puppet topics and associated technologies.  There&rsquo;s always pizza and beverages of all kinds, and we&rsquo;ve finally moved into our new meeting/class rooms, so come on out.</p>
]]></content>
  </entry>
  
</feed>
